{"version":3,"sources":["views/extensions/import-export/ExportSelected.js","@core/components/extensions-header/index.js"],"names":["initialData","id","name","username","email","website","ExportSelected","useState","data","filteredData","setFilteredData","dataToExport","setDataToExport","value","setValue","modal","setModal","fileName","setFileName","fileFormat","setFileFormat","selectedRows","setSelectedRows","toggleModal","renderTableData","map","col","className","classnames","selected","includes","type","label","checked","onChange","selectedRowsArr","splice","indexOf","push","handleSelect","title","subTitle","link","sm","Ripple","color","onClick","for","bsSize","e","target","length","filter","startsWithCondition","toLowerCase","startsWith","toString","includesCondition","handleFilter","responsive","i","handleSelectAll","isOpen","toggle","onClosed","placeholder","exportArr","item","wb","XLSX","utils","json_to_sheet","wbout","book_new","book_append_sheet","writeFile","handleExport","ExtensionsHeader","props","data-tour","href","rel"],"mappings":"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","file":"static/js/144.f7d1a81a.chunk.js","sourcesContent":["import { Fragment, useState } from 'react'\nimport ExtensionsHeader from '@components/extensions-header'\nimport {\n  Row,\n  Col,\n  Card,\n  CardBody,\n  Button,\n  Table,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Input,\n  FormGroup,\n  CustomInput,\n  Label\n} from 'reactstrap'\nimport classnames from 'classnames'\nimport XLSX from 'xlsx'\n\nconst initialData = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n    website: 'hildegard.org'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n    website: 'anastasia.net'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n    website: 'ramiro.info'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n    website: 'kale.biz'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n    website: 'demarco.info'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n    website: 'ola.org'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n    website: 'elvis.io'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n    website: 'jacynthe.com'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n    website: 'conrad.com'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n    website: 'ambrose.net'\n  }\n]\n\nconst ExportSelected = () => {\n  const [data] = useState(initialData)\n  const [filteredData, setFilteredData] = useState([])\n  const [dataToExport, setDataToExport] = useState([])\n  const [value, setValue] = useState('')\n  const [modal, setModal] = useState(false)\n  const [fileName, setFileName] = useState('')\n  const [fileFormat, setFileFormat] = useState('xlsx')\n  const [selectedRows, setSelectedRows] = useState([])\n\n  const toggleModal = () => setModal(!modal)\n\n  const handleFilter = e => {\n    let filteredData = []\n    const value = e.target.value\n    setValue(value)\n    if (value.length) {\n      filteredData = data.filter(col => {\n        const startsWithCondition =\n          col.name.toLowerCase().startsWith(value.toLowerCase()) ||\n          col.email.toLowerCase().startsWith(value.toLowerCase()) ||\n          col.website.toLowerCase().startsWith(value.toLowerCase()) ||\n          col.id.toString().toLowerCase().startsWith(value.toLowerCase())\n\n        const includesCondition =\n          col.name.toLowerCase().includes(value.toLowerCase()) ||\n          col.email.toLowerCase().includes(value.toLowerCase()) ||\n          col.website.toLowerCase().includes(value.toLowerCase()) ||\n          col.id.toString().toLowerCase().includes(value.toLowerCase())\n\n        if (startsWithCondition) return startsWithCondition\n        else if (!startsWithCondition && includesCondition) return includesCondition\n        else return null\n      })\n      setValue(value)\n      setFilteredData(filteredData)\n    }\n  }\n\n  const handleExport = () => {\n    const exportArr = dataToExport\n    data.map(item => {\n      if (selectedRows.includes(item.id)) {\n        return exportArr.push(item)\n      } else {\n        return null\n      }\n    })\n    setDataToExport([...exportArr])\n    const name = fileName.length ? `${fileName}.${fileFormat}` : `excel-sheet.${fileFormat}`\n    const wb = XLSX.utils.json_to_sheet(dataToExport)\n    const wbout = XLSX.utils.book_new()\n    XLSX.utils.book_append_sheet(wbout, wb, 'test')\n    XLSX.writeFile(wbout, name)\n    toggleModal()\n  }\n\n  const handleSelect = id => {\n    const selectedRowsArr = selectedRows\n    if (!selectedRowsArr.includes(id)) {\n      selectedRowsArr.push(id)\n    } else if (selectedRowsArr.includes(id)) {\n      selectedRowsArr.splice(selectedRowsArr.indexOf(id), 1)\n    } else {\n      return null\n    }\n    setSelectedRows([...selectedRowsArr])\n  }\n\n  const handleSelectAll = () => {\n    let selectedRowsArr = selectedRows\n    if (selectedRowsArr.length < data.length) {\n      const ids = data.map(i => i.id)\n      selectedRowsArr = ids\n    } else if (selectedRowsArr.length === data.length) {\n      selectedRowsArr = []\n    } else {\n      return null\n    }\n\n    setSelectedRows(selectedRowsArr)\n  }\n\n  const array = value ? filteredData : data\n  const renderTableData = array.map(col => {\n    return (\n      <tr\n        key={col.id}\n        className={classnames({\n          selected: selectedRows.includes(col.id)\n        })}\n      >\n        <td>\n          <CustomInput\n            type='checkbox'\n            id={col.id}\n            label=''\n            checked={!!selectedRows.includes(col.id)}\n            onChange={() => handleSelect(col.id)}\n          />\n        </td>\n        <td>{col.email}</td>\n        <td>{col.name}</td>\n        <td>{col.website}</td>\n        <td>{col.id}</td>\n      </tr>\n    )\n  })\n\n  return (\n    <Fragment>\n      <ExtensionsHeader\n        title='XLSX'\n        subTitle='Xlsx is a parser and writer for various spreadsheet formats'\n        link='https://github.com/AdeleD/react-paginate'\n      />\n      <Row className='export-component'>\n        <Col sm='12'>\n          <Card>\n            <CardBody className='pb-0'>\n              <div className='d-flex flex-wrap justify-content-between'>\n                <Button.Ripple color='primary' onClick={() => toggleModal()}>\n                  Export Selected\n                </Button.Ripple>\n                <div className='d-flex align-items-center justify-content-end'>\n                  <Label for='search-input' className='mr-1'>\n                    Search\n                  </Label>\n                  <Input id='search-input' bsSize='sm' type='text' value={value} onChange={e => handleFilter(e)} />\n                </div>\n              </div>\n            </CardBody>\n            <Table className='table-hover-animation mt-2' responsive>\n              <thead>\n                <tr>\n                  <th>\n                    <CustomInput\n                      type='checkbox'\n                      id='select-all'\n                      label=''\n                      checked={!!selectedRows.length}\n                      onChange={e => handleSelectAll()}\n                    />\n                  </th>\n                  <th>Email</th>\n                  <th>Name</th>\n                  <th>Website</th>\n                  <th>Rank</th>\n                </tr>\n              </thead>\n              <tbody>{renderTableData}</tbody>\n            </Table>\n          </Card>\n        </Col>\n      </Row>\n      <Modal\n        isOpen={modal}\n        toggle={() => toggleModal()}\n        className='modal-dialog-centered'\n        onClosed={() => setFileName('')}\n      >\n        <ModalHeader toggle={() => toggleModal()}>Export To Excel</ModalHeader>\n        <ModalBody>\n          <FormGroup>\n            <Input\n              type='text'\n              value={fileName}\n              onChange={e => setFileName(e.target.value)}\n              placeholder='Enter File Name'\n            />\n          </FormGroup>\n          <FormGroup>\n            <CustomInput\n              type='select'\n              id='selectFileFormat'\n              name='customSelect'\n              value={fileFormat}\n              onChange={e => {\n                setFileFormat(e.target.value)\n              }}\n            >\n              <option>xlsx</option>\n              <option>csv</option>\n              <option>txt</option>\n            </CustomInput>\n          </FormGroup>\n        </ModalBody>\n        <ModalFooter>\n          <Button color='primary' onClick={() => handleExport()}>\n            Export\n          </Button>\n          <Button color='flat-danger' onClick={() => toggleModal()}>\n            Cancel\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </Fragment>\n  )\n}\n\nexport default ExportSelected\n","// ** React Imports\nimport Proptypes from 'prop-types'\nimport { Row, Col } from 'reactstrap'\n\nconst ExtensionsHeader = props => {\n  return (\n    <Row className='mb-2'>\n      <Col sm='12' className='ml-50'>\n        <p className='font-medium-5 mt-1 extension-title' data-tour='extension-title'>\n          {props.title}\n        </p>\n        {props.link ? (\n          <a href={props.link} target='_blank' rel='noopener noreferrer'>\n            {props.subTitle}\n          </a>\n        ) : (\n          <p className='text-primary'>{props.subTitle}</p>\n        )}\n      </Col>\n    </Row>\n  )\n}\nexport default ExtensionsHeader\n\n// ** PropTypes\nExtensionsHeader.propTypes = {\n  title: Proptypes.string.isRequired,\n  subTitle: Proptypes.string.isRequired,\n  link: Proptypes.string\n}\n"],"sourceRoot":""}