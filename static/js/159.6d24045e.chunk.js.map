{"version":3,"sources":["views/pages/authentication/Register.js","@core/components/input-password-toggle/index.js"],"names":["Register","ability","useContext","AbilityContext","useSkin","skin","history","useHistory","dispatch","useDispatch","useForm","register","errors","handleSubmit","trigger","useState","email","setEmail","valErrors","setValErrors","username","setUsername","password","setPassword","setTerms","illustration","source","require","default","Terms","className","href","onClick","e","preventDefault","to","viewBox","version","height","x1","y1","x2","y2","id","stopColor","offset","stopOpacity","stroke","strokeWidth","fill","fillRule","transform","d","style","opacity","points","lg","sm","src","alt","md","tag","action","onSubmit","isObjEmpty","useJwt","then","res","data","error","arr","property","console","user","accessToken","update","handleLogin","push","catch","err","log","for","autoFocus","type","value","placeholder","name","onChange","errs","target","classnames","innerRef","required","validate","Object","keys","length","label","checked","invalid","terms","Ripple","block","color","size","InputPasswordToggle","props","hideIcon","showIcon","visible","htmlFor","iconSize","inputClassName","rest","inputVisibility","setInputVisibility","addonType","renderIcon","defaultProps"],"mappings":"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","file":"static/js/159.6d24045e.chunk.js","sourcesContent":["import { Fragment, useState, useContext } from 'react'\nimport { isObjEmpty } from '@utils'\nimport classnames from 'classnames'\nimport { useSkin } from '@hooks/useSkin'\nimport useJwt from '@src/auth/jwt/useJwt'\nimport { useDispatch } from 'react-redux'\nimport { useForm } from 'react-hook-form'\nimport { handleLogin } from '@store/actions/auth'\nimport { Link, useHistory } from 'react-router-dom'\nimport { AbilityContext } from '@src/utility/context/Can'\nimport InputPasswordToggle from '@components/input-password-toggle'\nimport { Facebook, Twitter, Mail, GitHub } from 'react-feather'\nimport { Row, Col, CardTitle, CardText, FormGroup, Label, Button, Form, Input, CustomInput } from 'reactstrap'\n\nimport '@styles/base/pages/page-auth.scss'\n\nconst Register = () => {\n  const ability = useContext(AbilityContext)\n\n  const [skin, setSkin] = useSkin()\n\n  const history = useHistory()\n\n  const dispatch = useDispatch()\n\n  const { register, errors, handleSubmit, trigger } = useForm()\n\n  const [email, setEmail] = useState('')\n  const [valErrors, setValErrors] = useState({})\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [terms, setTerms] = useState(false)\n\n  const illustration = skin === 'dark' ? 'register-v2-dark.svg' : 'register-v2.svg',\n    source = require(`@src/assets/images/pages/${illustration}`).default\n\n  const Terms = () => {\n    return (\n      <Fragment>\n        I agree to\n        <a className='ml-25' href='/' onClick={e => e.preventDefault()}>\n          privacy policy & terms\n        </a>\n      </Fragment>\n    )\n  }\n\n  const onSubmit = () => {\n    if (isObjEmpty(errors)) {\n      useJwt\n        .register({ username, email, password })\n        .then(res => {\n          if (res.data.error) {\n            const arr = {}\n            for (const property in res.data.error) {\n              if (res.data.error[property] !== null) arr[property] = res.data.error[property]\n            }\n            setValErrors(arr)\n            if (res.data.error.email !== null) console.error(res.data.error.email)\n            if (res.data.error.username !== null) console.error(res.data.error.username)\n          } else {\n            setValErrors({})\n            const data = { ...res.data.user, accessToken: res.data.accessToken }\n            ability.update(res.data.user.ability)\n            dispatch(handleLogin(data))\n            history.push('/')\n          }\n        })\n        .catch(err => console.log(err))\n    }\n  }\n\n  const handleUsernameChange = e => {\n    const errs = valErrors\n    if (errs.username) delete errs.username\n    setUsername(e.target.value)\n    setValErrors(errs)\n  }\n\n  const handleEmailChange = e => {\n    const errs = valErrors\n    if (errs.email) delete errs.email\n    setEmail(e.target.value)\n    setValErrors(errs)\n  }\n\n  return (\n    <div className='auth-wrapper auth-v2'>\n      <Row className='auth-inner m-0'>\n        <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>\n          <svg viewBox='0 0 139 95' version='1.1' height='28'>\n            <defs>\n              <linearGradient x1='100%' y1='10.5120544%' x2='50%' y2='89.4879456%' id='linearGradient-1'>\n                <stop stopColor='#000000' offset='0%'></stop>\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\n              </linearGradient>\n              <linearGradient x1='64.0437835%' y1='46.3276743%' x2='37.373316%' y2='100%' id='linearGradient-2'>\n                <stop stopColor='#EEEEEE' stopOpacity='0' offset='0%'></stop>\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\n              </linearGradient>\n            </defs>\n            <g id='Page-1' stroke='none' strokeWidth='1' fill='none' fillRule='evenodd'>\n              <g id='Artboard' transform='translate(-400.000000, -178.000000)'>\n                <g id='Group' transform='translate(400.000000, 178.000000)'>\n                  <path\n                    d='M-5.68434189e-14,2.84217094e-14 L39.1816085,2.84217094e-14 L69.3453773,32.2519224 L101.428699,2.84217094e-14 L138.784583,2.84217094e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L6.71554594,44.4188507 C2.46876683,39.9813776 0.345377275,35.1089553 0.345377275,29.8015838 C0.345377275,24.4942122 0.230251516,14.560351 -5.68434189e-14,2.84217094e-14 Z'\n                    id='Path'\n                    className='text-primary'\n                    style={{ fill: 'currentColor' }}\n                  ></path>\n                  <path\n                    d='M69.3453773,32.2519224 L101.428699,1.42108547e-14 L138.784583,1.42108547e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L32.8435758,70.5039241 L69.3453773,32.2519224 Z'\n                    id='Path'\n                    fill='url(#linearGradient-1)'\n                    opacity='0.2'\n                  ></path>\n                  <polygon\n                    id='Path-2'\n                    fill='#000000'\n                    opacity='0.049999997'\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 54.0490008 16.1851325'\n                  ></polygon>\n                  <polygon\n                    id='Path-2'\n                    fill='#000000'\n                    opacity='0.099999994'\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 58.3683556 20.7402338'\n                  ></polygon>\n                  <polygon\n                    id='Path-3'\n                    fill='url(#linearGradient-2)'\n                    opacity='0.099999994'\n                    points='101.428699 0 83.0667527 94.1480575 130.378721 47.0740288'\n                  ></polygon>\n                </g>\n              </g>\n            </g>\n          </svg>\n          <h2 className='brand-text text-primary ml-1'>Vuexy</h2>\n        </Link>\n        <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\n          <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\n            <img className='img-fluid' src={source} alt='Login V2' />\n          </div>\n        </Col>\n        <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\n          <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\n            <CardTitle tag='h2' className='font-weight-bold mb-1'>\n              Adventure starts here 🚀\n            </CardTitle>\n            <CardText className='mb-2'>Make your app management easy and fun!</CardText>\n\n            <Form action='/' className='auth-register-form mt-2' onSubmit={handleSubmit(onSubmit)}>\n              <FormGroup>\n                <Label className='form-label' for='register-username'>\n                  Username\n                </Label>\n                <Input\n                  autoFocus\n                  type='text'\n                  value={username}\n                  placeholder='johndoe'\n                  id='register-username'\n                  name='register-username'\n                  onChange={handleUsernameChange}\n                  className={classnames({ 'is-invalid': errors['register-username'] })}\n                  innerRef={register({ required: true, validate: value => value !== '' })}\n                />\n                {Object.keys(valErrors).length && valErrors.username ? (\n                  <small className='text-danger'>{valErrors.username}</small>\n                ) : null}\n              </FormGroup>\n              <FormGroup>\n                <Label className='form-label' for='register-email'>\n                  Email\n                </Label>\n                <Input\n                  type='email'\n                  value={email}\n                  id='register-email'\n                  name='register-email'\n                  onChange={handleEmailChange}\n                  placeholder='john@example.com'\n                  className={classnames({ 'is-invalid': errors['register-email'] })}\n                  innerRef={register({ required: true, validate: value => value !== '' })}\n                />\n                {Object.keys(valErrors).length && valErrors.email ? (\n                  <small className='text-danger'>{valErrors.email}</small>\n                ) : null}\n              </FormGroup>\n              <FormGroup>\n                <Label className='form-label' for='register-password'>\n                  Password\n                </Label>\n                <InputPasswordToggle\n                  value={password}\n                  id='register-password'\n                  name='register-password'\n                  className='input-group-merge'\n                  onChange={e => setPassword(e.target.value)}\n                  className={classnames({ 'is-invalid': errors['register-password'] })}\n                  innerRef={register({ required: true, validate: value => value !== '' })}\n                />\n              </FormGroup>\n              <FormGroup>\n                <CustomInput\n                  type='checkbox'\n                  id='terms'\n                  name='terms'\n                  value='terms'\n                  label={<Terms />}\n                  className='custom-control-Primary'\n                  innerRef={register({ required: true })}\n                  onChange={e => setTerms(e.target.checked)}\n                  invalid={errors.terms && true}\n                />\n              </FormGroup>\n              <Button.Ripple type='submit' block color='primary'>\n                Sign up\n              </Button.Ripple>\n            </Form>\n            <p className='text-center mt-2'>\n              <span className='mr-25'>Already have an account?</span>\n              <Link to='/login'>\n                <span>Sign in instead</span>\n              </Link>\n            </p>\n            <div className='divider my-2'>\n              <div className='divider-text'>or</div>\n            </div>\n            <div className='auth-footer-btn d-flex justify-content-center'>\n              <Button.Ripple color='facebook'>\n                <Facebook size={14} />\n              </Button.Ripple>\n              <Button.Ripple color='twitter'>\n                <Twitter size={14} />\n              </Button.Ripple>\n              <Button.Ripple color='google'>\n                <Mail size={14} />\n              </Button.Ripple>\n              <Button.Ripple className='mr-0' color='github'>\n                <GitHub size={14} />\n              </Button.Ripple>\n            </div>\n          </Col>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default Register\n","// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Eye, EyeOff } from 'react-feather'\nimport { InputGroup, InputGroupAddon, Input, InputGroupText, Label, inputClassName } from 'reactstrap'\n\nconst InputPasswordToggle = props => {\n  // ** Props\n  const {\n    label,\n    hideIcon,\n    showIcon,\n    visible,\n    className,\n    htmlFor,\n    placeholder,\n    iconSize,\n    inputClassName,\n    ...rest\n  } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? <Label for={htmlFor}>{label}</Label> : null}\n      <InputGroup\n        className={classnames({\n          [className]: className\n        })}\n      >\n        <Input\n          type={inputVisibility === false ? 'password' : 'text'}\n          placeholder={placeholder ? placeholder : '············'}\n          className={classnames({\n            [inputClassName]: inputClassName\n          })}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupAddon addonType='append' onClick={() => setInputVisibility(!inputVisibility)}>\n          <InputGroupText className='cursor-pointer'>{renderIcon()}</InputGroupText>\n        </InputGroupAddon>\n      </InputGroup>\n    </Fragment>\n  )\n}\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  inputClassName: PropTypes.string,\n  label(props, propName, componentName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props['htmlFor'] === 'undefined') {\n      throw new Error('htmlFor prop is required when label prop is present')\n    }\n  },\n  htmlFor(props, propName, componentName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props['label'] === 'undefined') {\n      throw new Error('label prop is required when htmlFor prop is present')\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n"],"sourceRoot":""}