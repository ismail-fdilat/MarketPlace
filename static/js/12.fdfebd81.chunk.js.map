{"version":3,"sources":["../node_modules/react-sortablejs/node_modules/classnames/index.js","../../../utils/src/browser-info.ts","../../../utils/src/utils.ts","../../../sortable/src/PluginManager.ts","../../../sortable/src/EventDispatcher.ts","../../../sortable/src/Sortable.ts","../../../plugins/swap/src/index.ts","../../../sortable/src/Animation.ts","../../../plugins/multi-drag/src/index.ts","../../../plugins/on-spill/src/index.ts","../../../plugins/auto-scroll/src/index.ts","../../src/modular-complete.ts","../node_modules/reactstrap/es/ListGroupItem.js","../home/runner/work/react-sortablejs/react-sortablejs/node_modules/@parcel/scope-hoisting/lib/helpers.js","util.ts","react-sortable.tsx"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","key","call","join","module","exports","default","userAgent","pattern","window","navigator","match","IE11OrLess","Edge","FireFox","Safari","IOS","ChromeForAndroid","captureMode","capture","passive","on","el","event","fn","addEventListener","off","removeEventListener","matches","selector","substring","msMatchesSelector","webkitMatchesSelector","_","getParentOrHost","host","document","nodeType","parentNode","closest","ctx","includeCTX","_throttleTimeout","R_SPACE","toggleClass","name","state","classList","className","replace","css","prop","val","style","defaultView","getComputedStyle","currentStyle","indexOf","matrix","selfOnly","appliedTransforms","transform","matrixFn","DOMMatrix","WebKitCSSMatrix","CSSMatrix","MSCSSMatrix","find","tagName","iterator","list","getElementsByTagName","n","getWindowScrollingElement","scrollingElement","documentElement","getRect","relativeToContainingBlock","relativeToNonStaticParent","undoScale","container","getBoundingClientRect","elRect","top","left","bottom","right","height","width","innerHeight","innerWidth","containerRect","parseInt","elMatrix","scaleX","a","scaleY","d","isScrolledPast","elSide","parentSide","parent","getParentAutoScrollElement","elSideVal","parentSideVal","getChild","childNum","options","currentChild","children","display","Sortable","ghost","dragged","draggable","lastChild","last","lastElementChild","previousElementSibling","index","nodeName","toUpperCase","clone","getRelativeScrollOffset","offsetLeft","offsetTop","winScroller","scrollLeft","scrollTop","includeSelf","elem","gotSelf","clientWidth","scrollWidth","clientHeight","scrollHeight","elemCSS","overflowX","overflowY","body","isRectEqual","rect1","rect2","Math","round","throttle","callback","ms","args","_this","this","setTimeout","scrollBy","x","y","Polymer","$","jQuery","Zepto","dom","cloneNode","setRect","rect","unsetRect","expando","Date","getTime","plugins","defaults","initializeByDefault","pluginManager","mount","plugin","option","pluginEvent","eventName","sortable","evt","eventCanceled","cancel","eventNameGlobal","forEach","pluginName","initializePlugins","initialized","assign","modified","modifyOption","getEventProperties","eventProperties","value","modifiedValue","optionListeners","dispatchEvent","rootEl","targetEl","cloneEl","toEl","fromEl","oldIndex","newIndex","oldDraggableIndex","newDraggableIndex","originalEvent","putSortable","extraEventProperties","onName","charAt","substr","CustomEvent","createEvent","initEvent","bubbles","cancelable","to","from","item","pullMode","lastPutMode","allEventProperties","PluginManager","data","bind","dragEl","parentEl","ghostEl","nextEl","lastDownEl","cloneHidden","dragStarted","moved","activeSortable","active","hideGhostForTarget","_hideGhostForTarget","unhideGhostForTarget","_unhideGhostForTarget","cloneNowHidden","cloneNowShown","dispatchSortableEvent","_dispatchEvent","info","activeGroup","tapEvt","touchEvt","lastDx","lastDy","tapDistanceLeft","tapDistanceTop","lastTarget","lastDirection","targetMoveDistance","ghostRelativeParent","awaitingDragStarted","ignoreNextClick","sortables","pastFirstInvertThresh","isCircumstantialInvert","ghostRelativeParentInitialScroll","_silent","savedInputChecked","documentExists","PositionGhostAbsolutely","CSSFloatProperty","supportDraggable","createElement","supportCssPointerEvents","cssText","pointerEvents","_detectDirection","elCSS","elWidth","paddingLeft","paddingRight","borderLeftWidth","borderRightWidth","child1","child2","firstChildCSS","secondChildCSS","firstChildWidth","marginLeft","marginRight","secondChildWidth","flexDirection","gridTemplateColumns","split","clear","_prepareGroup","toFn","pull","group","otherGroup","originalGroup","checkPull","checkPut","put","revertClone","preventDefault","stopPropagation","stopImmediatePropagation","lastSwapEl","nearestEmptyInsertDetectEvent","nearest","touches","clientX","clientY","some","threshold","emptyInsertThreshold","ret","target","_onDragOver","_checkOutsideTargetEl","_isOutsideThisEl","animationCallbackId","animationStates","sort","disabled","store","handle","test","swapThreshold","invertSwap","invertedSwapThreshold","removeCloneOnHide","direction","ghostClass","chosenClass","dragClass","ignore","filter","preventOnFilter","animation","easing","setData","dataTransfer","textContent","dropBubble","dragoverBubble","dataIdAttr","delay","delayOnTouchOnly","touchStartThreshold","Number","devicePixelRatio","forceFallback","fallbackClass","fallbackOnBody","fallbackTolerance","fallbackOffset","supportPointer","nativeDraggable","_onTapStart","get","captureAnimationState","slice","child","fromRect","thisAnimationDuration","childMatrix","f","e","addAnimationState","removeAnimationState","splice","arr","obj","animateAll","clearTimeout","animating","animationTime","time","toRect","prevFromRect","prevToRect","animatingRect","targetMatrix","sqrt","pow","animate","max","animationResetTimer","currentRect","duration","translateX","translateY","animatingX","animatingY","forRepaintDummy","offsetWidth","animated","onMove","dragRect","targetRect","willInsertAfter","retVal","onMoveFn","draggedRect","related","relatedRect","_disableDraggable","_unsilent","_generateId","str","src","href","sum","charCodeAt","_nextTick","_cancelNextTick","id","constructor","contains","_getDirection","type","touch","pointerType","originalTarget","shadowRoot","path","composedPath","root","inputs","idx","checked","button","isContentEditable","criteria","trim","_prepareDragStart","dragStartFn","ownerDocument","nextSibling","_lastX","_lastY","_onDrop","_disableDelayedDragEvents","_triggerDragStart","_disableDelayedDrag","_delayedDragTouchMoveHandler","_dragStartTimer","abs","floor","_onTouchMove","_onDragStart","selection","empty","getSelection","removeAllRanges","err","_dragStarted","fallback","_appendGhost","_nulling","_emulateDragOver","elementFromPoint","ghostMatrix","relativeScrollOffset","dx","dy","b","c","cssMatrix","appendChild","_hideClone","cloneId","insertBefore","_loopId","setInterval","effectAllowed","_dragStartId","revert","vertical","isOwner","canSort","fromSortable","completedFired","dragOverEvent","_ignoreWhileAnimating","completed","elLastChild","changed","targetBeforeFirstSwap","sibling","differentLevel","differentRowCol","dragElS1Opp","targetS1Opp","side1","scrolledPastTop","scrollBefore","isLastTarget","mouseOnAxis","targetLength","targetS1","targetS2","invert","dragIndex","nextElementSibling","after","moveVector","extra","axis","insertion","_showClone","_offMoveEvents","_offUpEvents","clearInterval","removeChild","save","handleEvent","dropEffect","toArray","order","getAttribute","items","set","destroy","querySelectorAll","removeAttribute","utils","is","extend","dst","nextTick","cancelNextTick","detectDirection","element","create","version","lastMultiDragSelect","multiDragSortable","clonesFromRect","clonesHidden","multiDragElements","multiDragClones","initialFolding","folding","insertMultiDragClones","elementsInserted","sortableIndex","removeMultiDragElements","multiDragElement","drop","toSortable","changedTouches","onSpill","Revert","Remove","startIndex","dragStart","parentSortable","scrollEl","scrollRootEl","lastAutoScrollX","lastAutoScrollY","pointerElemChangedInterval","autoScrolls","scrolling","clearAutoScrolls","autoScroll","pid","clearPointerElemChangedInterval","isFallback","scroll","scrollCustomFn","sens","scrollSensitivity","speed","scrollSpeed","scrollThisInstance","scrollFn","layersOut","currentParent","canScrollX","canScrollY","scrollPosX","scrollPosY","vx","vy","layer","scrollOffsetY","scrollOffsetX","bubbleScroll","AutoScroll","_handleAutoScroll","_handleFallbackAutoScroll","dragOverCompleted","dragOverBubble","nulling","ogElemScroller","newElem","RemoveOnSpill","RevertOnSpill","Swap","swapClass","dragOverValid","swap","prevSwapEl","n1","n2","i1","i2","p1","p2","isEqualNode","swapItem","MultiDrag","_deselectMultiDrag","_checkKeyDown","_checkKeyUp","selectedClass","multiDragKey","multiDragKeyDown","isMultiDrag","delayStartGlobal","delayEnded","setupClone","t","showClone","hideClone","dragStartGlobal","multiDrag","_this2","dragOver","clonesInserted","dragRectAbsolute","clonesHiddenBefore","dragOverAnimationCapture","dragMatrix","dragOverAnimationComplete","originalEvt","shiftKey","lastIndex","currentIndex","multiDragIndex","update","nullingGlobal","destroyGlobal","shift","select","deselect","oldIndicies","newIndicies","_this3","clones","toLowerCase","propTypes","tag","tagPropType","PropTypes","bool","color","string","action","any","cssModule","object","handleDisabledOnClick","ListGroupItem","props","Tag","attributes","_objectWithoutPropertiesLoose","mapToCssModules","onClick","React","_extends","defaultProps","$parcel$interopDefault","__esModule","removeNode","node","parentElement","removeNodes","customs","curr","insertNodes","newChild","refChild","createCustoms","mode","getMode","custom","$bf037e368b3040002dda64d69d3f$var$_objectSpread","map","handleStateRemove","normalized","newList","$bf037e368b3040002dda64d69d3f$var$_toConsumableArray","concat","reverse","handleStateAdd","newItem","dragging","ReactSortable","Component","ref","createRef","chosen","selected","setList","invariant","current","newOptions","makeOptions","classicProps","$ff006f4a88ed11a8119708ec3f19c5db$var$_objectSpread","getChildren","dataid","Children","prevClassName","filtered","$ff006f4a88ed11a8119708ec3f19c5db$var$_defineProperty","cloneElement","onAdd","onChange","onChoose","onClone","onEnd","onFilter","onRemove","onSort","onStart","onUnchoose","onUpdate","onSelect","onDeselect","$bf037e368b3040002dda64d69d3f$var$_objectWithoutProperties","prepareOnHandlerPropAndDOM","prepareOnHandlerProp","defaultValue","result","evtName","callOnHandlerProp","_this4","propEvent","$bf037e368b3040002dda64d69d3f$export$createCustoms","$ff006f4a88ed11a8119708ec3f19c5db$var$_toConsumableArray","$bf037e368b3040002dda64d69d3f$export$removeNodes","$bf037e368b3040002dda64d69d3f$export$handleStateAdd","$bf037e368b3040002dda64d69d3f$export$getMode","$bf037e368b3040002dda64d69d3f$export$insertNodes","$bf037e368b3040002dda64d69d3f$export$handleStateRemove","customClones","_this5","removeOnSpill","revertOnSpill","$bf037e368b3040002dda64d69d3f$export$removeNode","console","log","keys","k","includes"],"mappings":"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","file":"static/js/12.fdfebd81.chunk.js","sourcesContent":["/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","function userAgent(pattern) {\n  if (typeof window !== \"undefined\" && window.navigator) {\n    return !!(/*@__PURE__*/ navigator.userAgent.match(pattern));\n  }\n}\n\nexport const IE11OrLess = userAgent(\n  /(?:Trident.*rv[ :]?11\\.|msie|iemobile|Windows Phone)/i\n);\nexport const Edge = userAgent(/Edge/i);\nexport const FireFox = userAgent(/firefox/i);\nexport const Safari =\n  userAgent(/safari/i) && !userAgent(/chrome/i) && !userAgent(/android/i);\nexport const IOS = userAgent(/iP(ad|od|hone)/i);\nexport const ChromeForAndroid = userAgent(/chrome/i) && userAgent(/android/i);\n","import { IE11OrLess } from \"./browser-info\";\nimport Sortable from \"../../sortable/src/Sortable\";\n\nconst captureMode = {\n  capture: false,\n  passive: false,\n};\n\nfunction on(el, event, fn) {\n  el.addEventListener(event, fn, !IE11OrLess && captureMode);\n}\n\nfunction off(el, event, fn) {\n  el.removeEventListener(event, fn, !IE11OrLess && captureMode);\n}\n\nfunction matches(/**HTMLElement*/ el, /**String*/ selector) {\n  if (!selector) return;\n\n  selector[0] === \">\" && (selector = selector.substring(1));\n\n  if (el) {\n    try {\n      if (el.matches) {\n        return el.matches(selector);\n      } else if (el.msMatchesSelector) {\n        return el.msMatchesSelector(selector);\n      } else if (el.webkitMatchesSelector) {\n        return el.webkitMatchesSelector(selector);\n      }\n    } catch (_) {\n      return false;\n    }\n  }\n\n  return false;\n}\n\nfunction getParentOrHost(el) {\n  return el.host && el !== document && el.host.nodeType\n    ? el.host\n    : el.parentNode;\n}\n\nfunction closest(\n  /**HTMLElement*/ el,\n  /**String*/ selector,\n  /**HTMLElement*/ ctx,\n  includeCTX\n) {\n  if (el) {\n    ctx = ctx || document;\n\n    do {\n      if (\n        (selector != null &&\n          (selector[0] === \">\"\n            ? el.parentNode === ctx && matches(el, selector)\n            : matches(el, selector))) ||\n        (includeCTX && el === ctx)\n      ) {\n        return el;\n      }\n\n      if (el === ctx) break;\n      /* jshint boss:true */\n    } while ((el = getParentOrHost(el)));\n  }\n\n  return null;\n}\n\nconst R_SPACE = /\\s+/g;\n\nfunction toggleClass(el, name, state) {\n  if (el && name) {\n    if (el.classList) {\n      el.classList[state ? \"add\" : \"remove\"](name);\n    } else {\n      let className = (\" \" + el.className + \" \")\n        .replace(R_SPACE, \" \")\n        .replace(\" \" + name + \" \", \" \");\n      el.className = (className + (state ? \" \" + name : \"\")).replace(\n        R_SPACE,\n        \" \"\n      );\n    }\n  }\n}\n\nfunction css(el, prop, val) {\n  let style = el && el.style;\n\n  if (style) {\n    if (val === void 0) {\n      if (document.defaultView && document.defaultView.getComputedStyle) {\n        val = document.defaultView.getComputedStyle(el, \"\");\n      } else if (el.currentStyle) {\n        val = el.currentStyle;\n      }\n\n      return prop === void 0 ? val : val[prop];\n    } else {\n      if (!(prop in style) && prop.indexOf(\"webkit\") === -1) {\n        prop = \"-webkit-\" + prop;\n      }\n\n      style[prop] = val + (typeof val === \"string\" ? \"\" : \"px\");\n    }\n  }\n}\n\nfunction matrix(el, selfOnly) {\n  let appliedTransforms = \"\";\n  if (typeof el === \"string\") {\n    appliedTransforms = el;\n  } else {\n    do {\n      //@ts-ignore\n      let transform = css(el, \"transform\");\n\n      if (transform && transform !== \"none\") {\n        appliedTransforms = transform + \" \" + appliedTransforms;\n      }\n      /* jshint boss:true */\n    } while (!selfOnly && (el = el.parentNode));\n  }\n\n  const matrixFn =\n    window.DOMMatrix ||\n    window.WebKitCSSMatrix ||\n    //@ts-ignore\n    window.CSSMatrix ||\n    //@ts-ignore\n    window.MSCSSMatrix;\n  /*jshint -W056 */\n  return matrixFn && new matrixFn(appliedTransforms);\n}\n\nfunction find(ctx, tagName, iterator) {\n  if (ctx) {\n    let list = ctx.getElementsByTagName(tagName),\n      i = 0,\n      n = list.length;\n\n    if (iterator) {\n      for (; i < n; i++) {\n        iterator(list[i], i);\n      }\n    }\n\n    return list;\n  }\n\n  return [];\n}\n\nfunction getWindowScrollingElement() {\n  let scrollingElement = document.scrollingElement;\n\n  if (scrollingElement) {\n    return scrollingElement;\n  } else {\n    return document.documentElement;\n  }\n}\n\n/**\n * Returns the \"bounding client rect\" of given element\n * @param  {HTMLElement} el                       The element whose boundingClientRect is wanted\n * @param  {[Boolean]} relativeToContainingBlock  Whether the rect should be relative to the containing block of (including) the container\n * @param  {[Boolean]} relativeToNonStaticParent  Whether the rect should be relative to the relative parent of (including) the contaienr\n * @param  {[Boolean]} undoScale                  Whether the container's scale() should be undone\n * @param  {[HTMLElement]} container              The parent the element will be placed in\n * @return {Object}                               The boundingClientRect of el, with specified adjustments\n */\nfunction getRect(\n  el,\n  relativeToContainingBlock,\n  relativeToNonStaticParent,\n  undoScale,\n  container\n) {\n  if (!el.getBoundingClientRect && el !== window) return;\n\n  let elRect, top, left, bottom, right, height, width;\n\n  if (el !== window && el !== getWindowScrollingElement()) {\n    elRect = el.getBoundingClientRect();\n    top = elRect.top;\n    left = elRect.left;\n    bottom = elRect.bottom;\n    right = elRect.right;\n    height = elRect.height;\n    width = elRect.width;\n  } else {\n    top = 0;\n    left = 0;\n    bottom = window.innerHeight;\n    right = window.innerWidth;\n    height = window.innerHeight;\n    width = window.innerWidth;\n  }\n\n  if (\n    (relativeToContainingBlock || relativeToNonStaticParent) &&\n    el !== window\n  ) {\n    // Adjust for translate()\n    container = container || el.parentNode;\n\n    // solves #1123 (see: https://stackoverflow.com/a/37953806/6088312)\n    // Not needed on <= IE11\n    if (!IE11OrLess) {\n      do {\n        if (\n          container &&\n          container.getBoundingClientRect &&\n          //@ts-ignore\n          (css(container, \"transform\") !== \"none\" ||\n            (relativeToNonStaticParent &&\n              //@ts-ignore\n              css(container, \"position\") !== \"static\"))\n        ) {\n          let containerRect = container.getBoundingClientRect();\n\n          // Set relative to edges of padding box of container\n          top -=\n            //@ts-ignore\n            containerRect.top + parseInt(css(container, \"border-top-width\"));\n          left -=\n            //@ts-ignore\n            containerRect.left + parseInt(css(container, \"border-left-width\"));\n          bottom = top + elRect.height;\n          right = left + elRect.width;\n\n          break;\n        }\n        /* jshint boss:true */\n      } while ((container = container.parentNode));\n    }\n  }\n\n  if (undoScale && el !== window) {\n    // Adjust for scale()\n    //@ts-ignore\n    let elMatrix = matrix(container || el),\n      scaleX = elMatrix && elMatrix.a,\n      scaleY = elMatrix && elMatrix.d;\n\n    if (elMatrix) {\n      top /= scaleY;\n      left /= scaleX;\n\n      width /= scaleX;\n      height /= scaleY;\n\n      bottom = top + height;\n      right = left + width;\n    }\n  }\n\n  return {\n    top: top,\n    left: left,\n    bottom: bottom,\n    right: right,\n    width: width,\n    height: height,\n  };\n}\n\n/**\n * Checks if a side of an element is scrolled past a side of its parents\n * @param  {HTMLElement}  el           The element who's side being scrolled out of view is in question\n * @param  {String}       elSide       Side of the element in question ('top', 'left', 'right', 'bottom')\n * @param  {String}       parentSide   Side of the parent in question ('top', 'left', 'right', 'bottom')\n * @return {HTMLElement}               The parent scroll element that the el's side is scrolled past, or null if there is no such element\n */\nfunction isScrolledPast(el, elSide, parentSide) {\n  let parent = getParentAutoScrollElement(el, true),\n    //@ts-ignore\n    elSideVal = getRect(el)[elSide];\n\n  /* jshint boss:true */\n  while (parent) {\n    //@ts-ignore\n    let parentSideVal = getRect(parent)[parentSide],\n      visible;\n\n    if (parentSide === \"top\" || parentSide === \"left\") {\n      visible = elSideVal >= parentSideVal;\n    } else {\n      visible = elSideVal <= parentSideVal;\n    }\n\n    if (!visible) return parent;\n\n    if (parent === getWindowScrollingElement()) break;\n\n    parent = getParentAutoScrollElement(parent, false);\n  }\n\n  return false;\n}\n\n/**\n * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)\n * and non-draggable elements\n * @param  {HTMLElement} el       The parent element\n * @param  {Number} childNum      The index of the child\n * @param  {Object} options       Parent Sortable's options\n * @return {HTMLElement}          The child at index childNum, or null if not found\n */\nfunction getChild(el, childNum, options) {\n  let currentChild = 0,\n    i = 0,\n    children = el.children;\n\n  while (i < children.length) {\n    if (\n      children[i].style.display !== \"none\" &&\n      //@ts-ignore\n      children[i] !== Sortable.ghost &&\n      //@ts-ignore\n      children[i] !== Sortable.dragged &&\n      closest(children[i], options.draggable, el, false)\n    ) {\n      if (currentChild === childNum) {\n        return children[i];\n      }\n      currentChild++;\n    }\n\n    i++;\n  }\n  return null;\n}\n\n/**\n * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)\n * @param  {HTMLElement} el       Parent element\n * @param  {selector} selector    Any other elements that should be ignored\n * @return {HTMLElement}          The last child, ignoring ghostEl\n */\nfunction lastChild(el, selector) {\n  let last = el.lastElementChild;\n\n  while (\n    last &&\n    //@ts-ignore\n    (last === Sortable.ghost ||\n      //@ts-ignore\n      css(last, \"display\") === \"none\" ||\n      (selector && !matches(last, selector)))\n  ) {\n    last = last.previousElementSibling;\n  }\n\n  return last || null;\n}\n\n/**\n * Returns the index of an element within its parent for a selected set of\n * elements\n * @param  {HTMLElement} el\n * @param  {selector} selector\n * @return {number}\n */\nfunction index(el, selector) {\n  let index = 0;\n\n  if (!el || !el.parentNode) {\n    return -1;\n  }\n\n  /* jshint boss:true */\n  while ((el = el.previousElementSibling)) {\n    if (\n      el.nodeName.toUpperCase() !== \"TEMPLATE\" &&\n      //@ts-ignore\n      el !== Sortable.clone &&\n      (!selector || matches(el, selector))\n    ) {\n      index++;\n    }\n  }\n\n  return index;\n}\n\n/**\n * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.\n * The value is returned in real pixels.\n * @param  {HTMLElement} el\n * @return {Array}             Offsets in the format of [left, top]\n */\nfunction getRelativeScrollOffset(el) {\n  let offsetLeft = 0,\n    offsetTop = 0,\n    winScroller = getWindowScrollingElement();\n\n  if (el) {\n    do {\n      //@ts-ignore\n      let elMatrix = matrix(el),\n        scaleX = elMatrix.a,\n        scaleY = elMatrix.d;\n\n      offsetLeft += el.scrollLeft * scaleX;\n      offsetTop += el.scrollTop * scaleY;\n    } while (el !== winScroller && (el = el.parentNode));\n  }\n\n  return [offsetLeft, offsetTop];\n}\n\n/**\n * Returns the index of the object within the given array\n * @param  {Array} arr   Array that may or may not hold the object\n * @param  {Object} obj  An object that has a key-value pair unique to and identical to a key-value pair in the object you want to find\n * @return {Number}      The index of the object in the array, or -1\n */\nfunction indexOfObject(arr, obj) {\n  for (let i in arr) {\n    if (!arr.hasOwnProperty(i)) continue;\n    for (let key in obj) {\n      if (obj.hasOwnProperty(key) && obj[key] === arr[i][key]) return Number(i);\n    }\n  }\n  return -1;\n}\n\nfunction getParentAutoScrollElement(el, includeSelf) {\n  // skip to window\n  if (!el || !el.getBoundingClientRect) return getWindowScrollingElement();\n\n  let elem = el;\n  let gotSelf = false;\n  do {\n    // we don't need to get elem css if it isn't even overflowing in the first place (performance)\n    if (\n      elem.clientWidth < elem.scrollWidth ||\n      elem.clientHeight < elem.scrollHeight\n    ) {\n      //@ts-ignore\n      let elemCSS = css(elem);\n      if (\n        (elem.clientWidth < elem.scrollWidth &&\n          (elemCSS.overflowX == \"auto\" || elemCSS.overflowX == \"scroll\")) ||\n        (elem.clientHeight < elem.scrollHeight &&\n          (elemCSS.overflowY == \"auto\" || elemCSS.overflowY == \"scroll\"))\n      ) {\n        if (!elem.getBoundingClientRect || elem === document.body)\n          return getWindowScrollingElement();\n\n        if (gotSelf || includeSelf) return elem;\n        gotSelf = true;\n      }\n    }\n    /* jshint boss:true */\n  } while ((elem = elem.parentNode));\n\n  return getWindowScrollingElement();\n}\n\nfunction extend(dst, src) {\n  if (dst && src) {\n    for (let key in src) {\n      if (src.hasOwnProperty(key)) {\n        dst[key] = src[key];\n      }\n    }\n  }\n\n  return dst;\n}\n\nfunction isRectEqual(rect1, rect2) {\n  return (\n    Math.round(rect1.top) === Math.round(rect2.top) &&\n    Math.round(rect1.left) === Math.round(rect2.left) &&\n    Math.round(rect1.height) === Math.round(rect2.height) &&\n    Math.round(rect1.width) === Math.round(rect2.width)\n  );\n}\n\nlet _throttleTimeout;\nfunction throttle(callback, ms) {\n  return function () {\n    if (!_throttleTimeout) {\n      let args = arguments,\n        _this = this;\n\n      if (args.length === 1) {\n        callback.call(_this, args[0]);\n      } else {\n        callback.apply(_this, args);\n      }\n\n      _throttleTimeout = setTimeout(function () {\n        _throttleTimeout = void 0;\n      }, ms);\n    }\n  };\n}\n\nfunction cancelThrottle() {\n  clearTimeout(_throttleTimeout);\n  _throttleTimeout = void 0;\n}\n\nfunction scrollBy(el, x, y) {\n  el.scrollLeft += x;\n  el.scrollTop += y;\n}\n\nfunction clone(el) {\n  //@ts-ignore\n  let Polymer = window.Polymer;\n  //@ts-ignore\n  let $ = window.jQuery || window.Zepto;\n\n  if (Polymer && Polymer.dom) {\n    return Polymer.dom(el).cloneNode(true);\n  } else if ($) {\n    return $(el).clone(true)[0];\n  } else {\n    return el.cloneNode(true);\n  }\n}\n\nfunction setRect(el, rect) {\n  css(el, \"position\", \"absolute\");\n  css(el, \"top\", rect.top);\n  css(el, \"left\", rect.left);\n  css(el, \"width\", rect.width);\n  css(el, \"height\", rect.height);\n}\n\nfunction unsetRect(el) {\n  css(el, \"position\", \"\");\n  css(el, \"top\", \"\");\n  css(el, \"left\", \"\");\n  css(el, \"width\", \"\");\n  css(el, \"height\", \"\");\n}\n\nconst expando = \"Sortable\" + new Date().getTime();\n\nexport {\n  on,\n  off,\n  matches,\n  getParentOrHost,\n  closest,\n  toggleClass,\n  css,\n  matrix,\n  find,\n  getWindowScrollingElement,\n  getRect,\n  isScrolledPast,\n  getChild,\n  lastChild,\n  index,\n  getRelativeScrollOffset,\n  indexOfObject,\n  getParentAutoScrollElement,\n  extend,\n  isRectEqual,\n  throttle,\n  cancelThrottle,\n  scrollBy,\n  clone,\n  setRect,\n  unsetRect,\n  expando,\n};\n","let plugins = [];\n\nconst defaults = {\n  initializeByDefault: true,\n};\n\nconst pluginManager = {\n  mount(plugin) {\n    // Set default static properties\n    for (let option in defaults) {\n      if (defaults.hasOwnProperty(option) && !(option in plugin)) {\n        plugin[option] = defaults[option];\n      }\n    }\n    plugins.push(plugin);\n  },\n  pluginEvent(eventName, sortable, evt) {\n    this.eventCanceled = false;\n    evt.cancel = () => {\n      this.eventCanceled = true;\n    };\n    const eventNameGlobal = eventName + \"Global\";\n    plugins.forEach((plugin) => {\n      if (!sortable[plugin.pluginName]) return;\n      // Fire global events if it exists in this sortable\n      if (sortable[plugin.pluginName][eventNameGlobal]) {\n        sortable[plugin.pluginName][eventNameGlobal]({ sortable, ...evt });\n      }\n\n      // Only fire plugin event if plugin is enabled in this sortable,\n      // and plugin has event defined\n      if (\n        sortable.options[plugin.pluginName] &&\n        sortable[plugin.pluginName][eventName]\n      ) {\n        sortable[plugin.pluginName][eventName]({ sortable, ...evt });\n      }\n    });\n  },\n  initializePlugins(sortable, el, defaults, options) {\n    plugins.forEach((plugin) => {\n      const pluginName = plugin.pluginName;\n      if (!sortable.options[pluginName] && !plugin.initializeByDefault) return;\n\n      let initialized = new plugin(sortable, el, sortable.options);\n      initialized.sortable = sortable;\n      initialized.options = sortable.options;\n      sortable[pluginName] = initialized;\n\n      // Add default options from plugin\n      Object.assign(defaults, initialized.defaults);\n    });\n\n    for (let option in sortable.options) {\n      if (!sortable.options.hasOwnProperty(option)) continue;\n      let modified = this.modifyOption(\n        sortable,\n        option,\n        sortable.options[option]\n      );\n      if (typeof modified !== \"undefined\") {\n        sortable.options[option] = modified;\n      }\n    }\n  },\n  getEventProperties(name, sortable) {\n    let eventProperties = {};\n    plugins.forEach((plugin) => {\n      if (typeof plugin.eventProperties !== \"function\") return;\n      Object.assign(\n        eventProperties,\n        plugin.eventProperties.call(sortable[plugin.pluginName], name)\n      );\n    });\n\n    return eventProperties;\n  },\n  modifyOption(sortable, name, value) {\n    let modifiedValue;\n    plugins.forEach((plugin) => {\n      // Plugin must exist on the Sortable\n      if (!sortable[plugin.pluginName]) return;\n\n      // If static option listener exists for this option, call in the context of the Sortable's instance of this plugin\n      if (\n        plugin.optionListeners &&\n        typeof plugin.optionListeners[name] === \"function\"\n      ) {\n        modifiedValue = plugin.optionListeners[name].call(\n          sortable[plugin.pluginName],\n          value\n        );\n      }\n    });\n\n    return modifiedValue;\n  },\n};\n\nexport default pluginManager;\n","import { expando, IE11OrLess, Edge } from \"../../utils/src\";\nimport PluginManager from \"./PluginManager\";\n\nexport default function dispatchEvent({\n  sortable,\n  rootEl,\n  name,\n  targetEl,\n  cloneEl,\n  toEl,\n  fromEl,\n  oldIndex,\n  newIndex,\n  oldDraggableIndex,\n  newDraggableIndex,\n  originalEvent,\n  putSortable,\n  extraEventProperties,\n}) {\n  sortable = sortable || (rootEl && rootEl[expando]);\n  if (!sortable) return;\n\n  let evt,\n    options = sortable.options,\n    onName = \"on\" + name.charAt(0).toUpperCase() + name.substr(1);\n  // Support for new CustomEvent feature\n  if (window.CustomEvent && !IE11OrLess && !Edge) {\n    evt = new CustomEvent(name, {\n      bubbles: true,\n      cancelable: true,\n    });\n  } else {\n    evt = document.createEvent(\"Event\");\n    evt.initEvent(name, true, true);\n  }\n\n  evt.to = toEl || rootEl;\n  evt.from = fromEl || rootEl;\n  evt.item = targetEl || rootEl;\n  evt.clone = cloneEl;\n\n  evt.oldIndex = oldIndex;\n  evt.newIndex = newIndex;\n\n  evt.oldDraggableIndex = oldDraggableIndex;\n  evt.newDraggableIndex = newDraggableIndex;\n\n  evt.originalEvent = originalEvent;\n  evt.pullMode = putSortable ? putSortable.lastPutMode : undefined;\n\n  let allEventProperties = {\n    ...extraEventProperties,\n    ...PluginManager.getEventProperties(name, sortable),\n  };\n  for (let option in allEventProperties) {\n    evt[option] = allEventProperties[option];\n  }\n\n  if (rootEl) {\n    rootEl.dispatchEvent(evt);\n  }\n\n  if (options[onName]) {\n    options[onName].call(sortable, evt);\n  }\n}\n","import { version } from \"../package.json\";\nimport AnimationStateManager from \"./Animation\";\nimport PluginManager from \"./PluginManager\";\nimport dispatchEvent from \"./EventDispatcher\";\n/**\n * @todo import as namespace: import * as utils from \"../../utils/src\"\n */\nimport {\n  on,\n  off,\n  closest,\n  toggleClass,\n  css,\n  matrix,\n  find,\n  getWindowScrollingElement,\n  getRect,\n  isScrolledPast,\n  getChild,\n  lastChild,\n  index,\n  getRelativeScrollOffset,\n  extend,\n  throttle,\n  scrollBy,\n  clone,\n  expando,\n  IE11OrLess,\n  Edge,\n  FireFox,\n  Safari,\n  IOS,\n  ChromeForAndroid,\n} from \"../../utils/src\";\n\nlet pluginEvent = function (\n  eventName,\n  sortable,\n  //@ts-ignore\n  { evt: originalEvent, ...data } = {}\n) {\n  PluginManager.pluginEvent.bind(Sortable)(eventName, sortable, {\n    dragEl,\n    parentEl,\n    ghostEl,\n    rootEl,\n    nextEl,\n    lastDownEl,\n    cloneEl,\n    cloneHidden,\n    dragStarted: moved,\n    putSortable,\n    //@ts-ignore\n    activeSortable: Sortable.active,\n    originalEvent,\n\n    oldIndex,\n    oldDraggableIndex,\n    newIndex,\n    newDraggableIndex,\n\n    hideGhostForTarget: _hideGhostForTarget,\n    unhideGhostForTarget: _unhideGhostForTarget,\n\n    cloneNowHidden() {\n      cloneHidden = true;\n    },\n    cloneNowShown() {\n      cloneHidden = false;\n    },\n\n    dispatchSortableEvent(name) {\n      _dispatchEvent({ sortable, name, originalEvent });\n    },\n\n    ...data,\n  });\n};\n\nfunction _dispatchEvent(info) {\n  dispatchEvent({\n    putSortable,\n    cloneEl,\n    targetEl: dragEl,\n    rootEl,\n    oldIndex,\n    oldDraggableIndex,\n    newIndex,\n    newDraggableIndex,\n    ...info,\n  });\n}\n\nlet dragEl,\n  parentEl,\n  ghostEl,\n  rootEl,\n  nextEl,\n  lastDownEl,\n  cloneEl,\n  cloneHidden,\n  oldIndex,\n  newIndex,\n  oldDraggableIndex,\n  newDraggableIndex,\n  activeGroup,\n  putSortable,\n  awaitingDragStarted = false,\n  ignoreNextClick = false,\n  sortables = [],\n  tapEvt,\n  touchEvt,\n  lastDx,\n  lastDy,\n  tapDistanceLeft,\n  tapDistanceTop,\n  moved,\n  lastTarget,\n  lastDirection,\n  pastFirstInvertThresh = false,\n  isCircumstantialInvert = false,\n  targetMoveDistance,\n  // For positioning ghost absolutely\n  ghostRelativeParent,\n  ghostRelativeParentInitialScroll = [], // (left, top)\n  _silent = false,\n  savedInputChecked = [];\n\n/** @const */\nconst documentExists = typeof document !== \"undefined\",\n  PositionGhostAbsolutely = IOS,\n  CSSFloatProperty = Edge || IE11OrLess ? \"cssFloat\" : \"float\",\n  // This will not pass for IE9, because IE9 DnD only works on anchors\n  supportDraggable =\n    documentExists &&\n    !ChromeForAndroid &&\n    !IOS &&\n    \"draggable\" in document.createElement(\"div\"),\n  supportCssPointerEvents = (function () {\n    if (!documentExists) return;\n    // false when <= IE11\n    if (IE11OrLess) {\n      return false;\n    }\n    let el = document.createElement(\"x\");\n    el.style.cssText = \"pointer-events:auto\";\n    return el.style.pointerEvents === \"auto\";\n  })(),\n  _detectDirection = function (el, options) {\n    //@ts-ignore\n    let elCSS = css(el),\n      elWidth =\n        parseInt(elCSS.width) -\n        parseInt(elCSS.paddingLeft) -\n        parseInt(elCSS.paddingRight) -\n        parseInt(elCSS.borderLeftWidth) -\n        parseInt(elCSS.borderRightWidth),\n      child1 = getChild(el, 0, options),\n      child2 = getChild(el, 1, options),\n      //@ts-ignore\n      firstChildCSS = child1 && css(child1),\n      //@ts-ignore\n      secondChildCSS = child2 && css(child2),\n      firstChildWidth =\n        firstChildCSS &&\n        parseInt(firstChildCSS.marginLeft) +\n          parseInt(firstChildCSS.marginRight) +\n          //@ts-ignore\n          getRect(child1).width,\n      secondChildWidth =\n        secondChildCSS &&\n        parseInt(secondChildCSS.marginLeft) +\n          parseInt(secondChildCSS.marginRight) +\n          //@ts-ignore\n          getRect(child2).width;\n\n    if (elCSS.display === \"flex\") {\n      return elCSS.flexDirection === \"column\" ||\n        elCSS.flexDirection === \"column-reverse\"\n        ? \"vertical\"\n        : \"horizontal\";\n    }\n\n    if (elCSS.display === \"grid\") {\n      return elCSS.gridTemplateColumns.split(\" \").length <= 1\n        ? \"vertical\"\n        : \"horizontal\";\n    }\n\n    if (child1 && firstChildCSS.float && firstChildCSS.float !== \"none\") {\n      let touchingSideChild2 =\n        firstChildCSS.float === \"left\" ? \"left\" : \"right\";\n\n      return child2 &&\n        (secondChildCSS.clear === \"both\" ||\n          secondChildCSS.clear === touchingSideChild2)\n        ? \"vertical\"\n        : \"horizontal\";\n    }\n\n    return child1 &&\n      (firstChildCSS.display === \"block\" ||\n        firstChildCSS.display === \"flex\" ||\n        firstChildCSS.display === \"table\" ||\n        firstChildCSS.display === \"grid\" ||\n        (firstChildWidth >= elWidth && elCSS[CSSFloatProperty] === \"none\") ||\n        (child2 &&\n          elCSS[CSSFloatProperty] === \"none\" &&\n          firstChildWidth + secondChildWidth > elWidth))\n      ? \"vertical\"\n      : \"horizontal\";\n  },\n  _dragElInRowColumn = function (dragRect, targetRect, vertical) {\n    let dragElS1Opp = vertical ? dragRect.left : dragRect.top,\n      dragElS2Opp = vertical ? dragRect.right : dragRect.bottom,\n      dragElOppLength = vertical ? dragRect.width : dragRect.height,\n      targetS1Opp = vertical ? targetRect.left : targetRect.top,\n      targetS2Opp = vertical ? targetRect.right : targetRect.bottom,\n      targetOppLength = vertical ? targetRect.width : targetRect.height;\n\n    return (\n      dragElS1Opp === targetS1Opp ||\n      dragElS2Opp === targetS2Opp ||\n      dragElS1Opp + dragElOppLength / 2 === targetS1Opp + targetOppLength / 2\n    );\n  },\n  /**\n   * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.\n   * @param  {Number} x      X position\n   * @param  {Number} y      Y position\n   * @return {HTMLElement}   Element of the first found nearest Sortable\n   */\n  _detectNearestEmptySortable = function (x, y) {\n    let ret;\n    sortables.some((sortable) => {\n      //@ts-ignore\n      if (lastChild(sortable)) return;\n\n      //@ts-ignore\n      let rect = getRect(sortable),\n        threshold = sortable[expando].options.emptyInsertThreshold,\n        insideHorizontally =\n          x >= rect.left - threshold && x <= rect.right + threshold,\n        insideVertically =\n          y >= rect.top - threshold && y <= rect.bottom + threshold;\n\n      if (threshold && insideHorizontally && insideVertically) {\n        return (ret = sortable);\n      }\n    });\n    return ret;\n  },\n  _prepareGroup = function (options) {\n    function toFn(value, pull) {\n      return function (to, from, dragEl, evt) {\n        let sameGroup =\n          to.options.group.name &&\n          from.options.group.name &&\n          to.options.group.name === from.options.group.name;\n\n        if (value == null && (pull || sameGroup)) {\n          // Default pull value\n          // Default pull and put value if same group\n          return true;\n        } else if (value == null || value === false) {\n          return false;\n        } else if (pull && value === \"clone\") {\n          return value;\n        } else if (typeof value === \"function\") {\n          return toFn(value(to, from, dragEl, evt), pull)(\n            to,\n            from,\n            dragEl,\n            evt\n          );\n        } else {\n          let otherGroup = (pull ? to : from).options.group.name;\n\n          return (\n            value === true ||\n            (typeof value === \"string\" && value === otherGroup) ||\n            (value.join && value.indexOf(otherGroup) > -1)\n          );\n        }\n      };\n    }\n\n    let group = {};\n    let originalGroup = options.group;\n\n    if (!originalGroup || typeof originalGroup != \"object\") {\n      originalGroup = { name: originalGroup };\n    }\n\n    //@ts-ignore\n    group.name = originalGroup.name;\n    //@ts-ignore\n    group.checkPull = toFn(originalGroup.pull, true);\n    //@ts-ignore\n    group.checkPut = toFn(originalGroup.put);\n    //@ts-ignore\n    group.revertClone = originalGroup.revertClone;\n\n    options.group = group;\n  },\n  _hideGhostForTarget = function () {\n    if (!supportCssPointerEvents && ghostEl) {\n      css(ghostEl, \"display\", \"none\");\n    }\n  },\n  _unhideGhostForTarget = function () {\n    if (!supportCssPointerEvents && ghostEl) {\n      css(ghostEl, \"display\", \"\");\n    }\n  };\n\n// #1184 fix - Prevent click event on fallback if dragged but item not changed position\nif (documentExists) {\n  document.addEventListener(\n    \"click\",\n    function (evt) {\n      if (ignoreNextClick) {\n        evt.preventDefault();\n        evt.stopPropagation && evt.stopPropagation();\n        evt.stopImmediatePropagation && evt.stopImmediatePropagation();\n        ignoreNextClick = false;\n        return false;\n      }\n    },\n    true\n  );\n}\n\nlet nearestEmptyInsertDetectEvent = function (evt) {\n  if (dragEl) {\n    evt = evt.touches ? evt.touches[0] : evt;\n    let nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);\n\n    if (nearest) {\n      // Create imitation event\n      let event = {};\n      for (let i in evt) {\n        if (evt.hasOwnProperty(i)) {\n          event[i] = evt[i];\n        }\n      }\n      //@ts-ignore\n      event.target = event.rootEl = nearest;\n      //@ts-ignore\n      event.preventDefault = void 0;\n      //@ts-ignore\n      event.stopPropagation = void 0;\n      nearest[expando]._onDragOver(event);\n    }\n  }\n};\n\nlet _checkOutsideTargetEl = function (evt) {\n  if (dragEl) {\n    dragEl.parentNode[expando]._isOutsideThisEl(evt.target);\n  }\n};\n\n/**\n * @class  Sortable\n * @param  {HTMLElement}  el\n * @param  {Object}       [options]\n */\nfunction Sortable(el, options) {\n  if (!(el && el.nodeType && el.nodeType === 1)) {\n    throw `Sortable: \\`el\\` must be an HTMLElement, not ${{}.toString.call(\n      el\n    )}`;\n  }\n\n  this.el = el; // root element\n  this.options = options = Object.assign({}, options);\n\n  // Export instance\n  el[expando] = this;\n\n  let defaults = {\n    group: null,\n    sort: true,\n    disabled: false,\n    store: null,\n    handle: null,\n    draggable: /^[uo]l$/i.test(el.nodeName) ? \">li\" : \">*\",\n    swapThreshold: 1, // percentage; 0 <= x <= 1\n    invertSwap: false, // invert always\n    invertedSwapThreshold: null, // will be set to same as swapThreshold if default\n    removeCloneOnHide: true,\n    direction: function () {\n      return _detectDirection(el, this.options);\n    },\n    ghostClass: \"sortable-ghost\",\n    chosenClass: \"sortable-chosen\",\n    dragClass: \"sortable-drag\",\n    ignore: \"a, img\",\n    filter: null,\n    preventOnFilter: true,\n    animation: 0,\n    easing: null,\n    setData: function (dataTransfer, dragEl) {\n      dataTransfer.setData(\"Text\", dragEl.textContent);\n    },\n    dropBubble: false,\n    dragoverBubble: false,\n    dataIdAttr: \"data-id\",\n    delay: 0,\n    delayOnTouchOnly: false,\n    touchStartThreshold:\n      (Number.parseInt ? Number : window).parseInt(\n        //@ts-ignore\n        window.devicePixelRatio,\n        10\n      ) || 1,\n    forceFallback: false,\n    fallbackClass: \"sortable-fallback\",\n    fallbackOnBody: false,\n    fallbackTolerance: 0,\n    fallbackOffset: { x: 0, y: 0 },\n    supportPointer:\n      //@ts-ignore\n      Sortable.supportPointer !== false && \"PointerEvent\" in window,\n    emptyInsertThreshold: 5,\n  };\n\n  //@ts-ignore\n  PluginManager.initializePlugins(this, el, defaults);\n\n  // Set default options\n  for (let name in defaults) {\n    !(name in options) && (options[name] = defaults[name]);\n  }\n\n  _prepareGroup(options);\n\n  // Bind all private methods\n  for (let fn in this) {\n    if (fn.charAt(0) === \"_\" && typeof this[fn] === \"function\") {\n      this[fn] = this[fn].bind(this);\n    }\n  }\n\n  // Setup drag mode\n  this.nativeDraggable = options.forceFallback ? false : supportDraggable;\n\n  if (this.nativeDraggable) {\n    // Touch start threshold cannot be greater than the native dragstart threshold\n    this.options.touchStartThreshold = 1;\n  }\n\n  // Bind events\n  if (options.supportPointer) {\n    on(el, \"pointerdown\", this._onTapStart);\n  } else {\n    on(el, \"mousedown\", this._onTapStart);\n    on(el, \"touchstart\", this._onTapStart);\n  }\n\n  if (this.nativeDraggable) {\n    on(el, \"dragover\", this);\n    on(el, \"dragenter\", this);\n  }\n\n  sortables.push(this.el);\n\n  // Restore sorting\n  options.store &&\n    options.store.get &&\n    this.sort(options.store.get(this) || []);\n\n  // Add animation state manager\n  Object.assign(this, AnimationStateManager());\n}\n\nSortable.prototype = /** @lends Sortable.prototype */ {\n  constructor: Sortable,\n\n  _isOutsideThisEl: function (target) {\n    if (!this.el.contains(target) && target !== this.el) {\n      lastTarget = null;\n    }\n  },\n\n  _getDirection: function (evt, target) {\n    return typeof this.options.direction === \"function\"\n      ? this.options.direction.call(this, evt, target, dragEl)\n      : this.options.direction;\n  },\n\n  _onTapStart: function (/** Event|TouchEvent */ evt) {\n    if (!evt.cancelable) return;\n    let _this = this,\n      el = this.el,\n      options = this.options,\n      preventOnFilter = options.preventOnFilter,\n      type = evt.type,\n      touch =\n        (evt.touches && evt.touches[0]) ||\n        (evt.pointerType && evt.pointerType === \"touch\" && evt),\n      target = (touch || evt).target,\n      originalTarget =\n        (evt.target.shadowRoot &&\n          ((evt.path && evt.path[0]) ||\n            (evt.composedPath && evt.composedPath()[0]))) ||\n        target,\n      filter = options.filter;\n\n    _saveInputCheckedState(el);\n\n    // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.\n    if (dragEl) {\n      return;\n    }\n\n    if (\n      (/mousedown|pointerdown/.test(type) && evt.button !== 0) ||\n      options.disabled\n    ) {\n      return; // only left button and enabled\n    }\n\n    // cancel dnd if original target is content editable\n    if (originalTarget.isContentEditable) {\n      return;\n    }\n\n    // Safari ignores further event handling after mousedown\n    if (\n      !this.nativeDraggable &&\n      Safari &&\n      target &&\n      target.tagName.toUpperCase() === \"SELECT\"\n    ) {\n      return;\n    }\n\n    target = closest(target, options.draggable, el, false);\n\n    if (target && target.animated) {\n      return;\n    }\n\n    if (lastDownEl === target) {\n      // Ignoring duplicate `down`\n      return;\n    }\n\n    // Get the index of the dragged element within its parent\n    //@ts-ignore\n    oldIndex = index(target);\n    oldDraggableIndex = index(target, options.draggable);\n\n    // Check filter\n    if (typeof filter === \"function\") {\n      if (filter.call(this, evt, target, this)) {\n        _dispatchEvent({\n          sortable: _this,\n          rootEl: originalTarget,\n          name: \"filter\",\n          targetEl: target,\n          toEl: el,\n          fromEl: el,\n        });\n        pluginEvent(\"filter\", _this, { evt });\n        preventOnFilter && evt.cancelable && evt.preventDefault();\n        return; // cancel dnd\n      }\n    } else if (filter) {\n      filter = filter.split(\",\").some(function (criteria) {\n        criteria = closest(originalTarget, criteria.trim(), el, false);\n\n        if (criteria) {\n          _dispatchEvent({\n            sortable: _this,\n            rootEl: criteria,\n            name: \"filter\",\n            targetEl: target,\n            fromEl: el,\n            toEl: el,\n          });\n          pluginEvent(\"filter\", _this, { evt });\n          return true;\n        }\n      });\n\n      if (filter) {\n        preventOnFilter && evt.cancelable && evt.preventDefault();\n        return; // cancel dnd\n      }\n    }\n\n    if (options.handle && !closest(originalTarget, options.handle, el, false)) {\n      return;\n    }\n\n    // Prepare `dragstart`\n    this._prepareDragStart(evt, touch, target);\n  },\n\n  _prepareDragStart: function (\n    /** Event */ evt,\n    /** Touch */ touch,\n    /** HTMLElement */ target\n  ) {\n    let _this = this,\n      el = _this.el,\n      options = _this.options,\n      ownerDocument = el.ownerDocument,\n      dragStartFn;\n\n    if (target && !dragEl && target.parentNode === el) {\n      //@ts-ignore\n      let dragRect = getRect(target);\n      rootEl = el;\n      dragEl = target;\n      parentEl = dragEl.parentNode;\n      nextEl = dragEl.nextSibling;\n      lastDownEl = target;\n      activeGroup = options.group;\n\n      //@ts-ignore\n      Sortable.dragged = dragEl;\n\n      tapEvt = {\n        target: dragEl,\n        clientX: (touch || evt).clientX,\n        clientY: (touch || evt).clientY,\n      };\n\n      tapDistanceLeft = tapEvt.clientX - dragRect.left;\n      tapDistanceTop = tapEvt.clientY - dragRect.top;\n\n      this._lastX = (touch || evt).clientX;\n      this._lastY = (touch || evt).clientY;\n\n      dragEl.style[\"will-change\"] = \"all\";\n\n      dragStartFn = function () {\n        pluginEvent(\"delayEnded\", _this, { evt });\n        //@ts-ignore\n        if (Sortable.eventCanceled) {\n          _this._onDrop();\n          return;\n        }\n        // Delayed drag has been triggered\n        // we can re-enable the events: touchmove/mousemove\n        _this._disableDelayedDragEvents();\n\n        if (!FireFox && _this.nativeDraggable) {\n          dragEl.draggable = true;\n        }\n\n        // Bind the events: dragstart/dragend\n        _this._triggerDragStart(evt, touch);\n\n        // Drag start event\n        _dispatchEvent({\n          sortable: _this,\n          name: \"choose\",\n          originalEvent: evt,\n        });\n\n        // Chosen item\n        toggleClass(dragEl, options.chosenClass, true);\n      };\n\n      // Disable \"draggable\"\n      options.ignore.split(\",\").forEach(function (criteria) {\n        find(dragEl, criteria.trim(), _disableDraggable);\n      });\n\n      on(ownerDocument, \"dragover\", nearestEmptyInsertDetectEvent);\n      on(ownerDocument, \"mousemove\", nearestEmptyInsertDetectEvent);\n      on(ownerDocument, \"touchmove\", nearestEmptyInsertDetectEvent);\n\n      on(ownerDocument, \"mouseup\", _this._onDrop);\n      on(ownerDocument, \"touchend\", _this._onDrop);\n      on(ownerDocument, \"touchcancel\", _this._onDrop);\n\n      // Make dragEl draggable (must be before delay for FireFox)\n      if (FireFox && this.nativeDraggable) {\n        this.options.touchStartThreshold = 4;\n        dragEl.draggable = true;\n      }\n\n      pluginEvent(\"delayStart\", this, { evt });\n\n      // Delay is impossible for native DnD in Edge or IE\n      if (\n        options.delay &&\n        (!options.delayOnTouchOnly || touch) &&\n        (!this.nativeDraggable || !(Edge || IE11OrLess))\n      ) {\n        //@ts-ignore\n        if (Sortable.eventCanceled) {\n          this._onDrop();\n          return;\n        }\n        // If the user moves the pointer or let go the click or touch\n        // before the delay has been reached:\n        // disable the delayed drag\n        on(ownerDocument, \"mouseup\", _this._disableDelayedDrag);\n        on(ownerDocument, \"touchend\", _this._disableDelayedDrag);\n        on(ownerDocument, \"touchcancel\", _this._disableDelayedDrag);\n        on(ownerDocument, \"mousemove\", _this._delayedDragTouchMoveHandler);\n        on(ownerDocument, \"touchmove\", _this._delayedDragTouchMoveHandler);\n        options.supportPointer &&\n          on(ownerDocument, \"pointermove\", _this._delayedDragTouchMoveHandler);\n\n        _this._dragStartTimer = setTimeout(dragStartFn, options.delay);\n      } else {\n        dragStartFn();\n      }\n    }\n  },\n\n  _delayedDragTouchMoveHandler: function (/** TouchEvent|PointerEvent **/ e) {\n    let touch = e.touches ? e.touches[0] : e;\n    if (\n      Math.max(\n        Math.abs(touch.clientX - this._lastX),\n        Math.abs(touch.clientY - this._lastY)\n      ) >=\n      Math.floor(\n        this.options.touchStartThreshold /\n          ((this.nativeDraggable && window.devicePixelRatio) || 1)\n      )\n    ) {\n      this._disableDelayedDrag();\n    }\n  },\n\n  _disableDelayedDrag: function () {\n    dragEl && _disableDraggable(dragEl);\n    clearTimeout(this._dragStartTimer);\n\n    this._disableDelayedDragEvents();\n  },\n\n  _disableDelayedDragEvents: function () {\n    let ownerDocument = this.el.ownerDocument;\n    off(ownerDocument, \"mouseup\", this._disableDelayedDrag);\n    off(ownerDocument, \"touchend\", this._disableDelayedDrag);\n    off(ownerDocument, \"touchcancel\", this._disableDelayedDrag);\n    off(ownerDocument, \"mousemove\", this._delayedDragTouchMoveHandler);\n    off(ownerDocument, \"touchmove\", this._delayedDragTouchMoveHandler);\n    off(ownerDocument, \"pointermove\", this._delayedDragTouchMoveHandler);\n  },\n\n  _triggerDragStart: function (/** Event */ evt, /** Touch */ touch) {\n    touch = touch || (evt.pointerType == \"touch\" && evt);\n\n    if (!this.nativeDraggable || touch) {\n      if (this.options.supportPointer) {\n        on(document, \"pointermove\", this._onTouchMove);\n      } else if (touch) {\n        on(document, \"touchmove\", this._onTouchMove);\n      } else {\n        on(document, \"mousemove\", this._onTouchMove);\n      }\n    } else {\n      on(dragEl, \"dragend\", this);\n      on(rootEl, \"dragstart\", this._onDragStart);\n    }\n\n    try {\n      //@ts-ignore\n      if (document.selection) {\n        // Timeout neccessary for IE9\n        _nextTick(function () {\n          //@ts-ignore\n          document.selection.empty();\n        });\n      } else {\n        window.getSelection().removeAllRanges();\n      }\n    } catch (err) {}\n  },\n\n  _dragStarted: function (fallback, evt) {\n    let _this = this;\n    awaitingDragStarted = false;\n    if (rootEl && dragEl) {\n      pluginEvent(\"dragStarted\", this, { evt });\n\n      if (this.nativeDraggable) {\n        on(document, \"dragover\", _checkOutsideTargetEl);\n      }\n      let options = this.options;\n\n      // Apply effect\n      !fallback && toggleClass(dragEl, options.dragClass, false);\n      toggleClass(dragEl, options.ghostClass, true);\n\n      //@ts-ignore\n      Sortable.active = this;\n\n      fallback && this._appendGhost();\n\n      // Drag start event\n      _dispatchEvent({\n        sortable: this,\n        name: \"start\",\n        originalEvent: evt,\n      });\n    } else {\n      this._nulling();\n    }\n  },\n\n  _emulateDragOver: function () {\n    if (touchEvt) {\n      this._lastX = touchEvt.clientX;\n      this._lastY = touchEvt.clientY;\n\n      _hideGhostForTarget();\n\n      let target = document.elementFromPoint(\n        touchEvt.clientX,\n        touchEvt.clientY\n      );\n      let parent = target;\n\n      while (target && target.shadowRoot) {\n        target = target.shadowRoot.elementFromPoint(\n          touchEvt.clientX,\n          touchEvt.clientY\n        );\n        if (target === parent) break;\n        parent = target;\n      }\n\n      dragEl.parentNode[expando]._isOutsideThisEl(target);\n\n      if (parent) {\n        do {\n          if (parent[expando]) {\n            let inserted;\n\n            inserted = parent[expando]._onDragOver({\n              clientX: touchEvt.clientX,\n              clientY: touchEvt.clientY,\n              target: target,\n              rootEl: parent,\n            });\n\n            if (inserted && !this.options.dragoverBubble) {\n              break;\n            }\n          }\n\n          target = parent; // store last element\n        } while (\n          /* jshint boss:true */\n          //@ts-ignore\n          (parent = parent.parentNode)\n        );\n      }\n\n      _unhideGhostForTarget();\n    }\n  },\n\n  _onTouchMove: function (/**TouchEvent*/ evt) {\n    if (tapEvt) {\n      let options = this.options,\n        fallbackTolerance = options.fallbackTolerance,\n        fallbackOffset = options.fallbackOffset,\n        touch = evt.touches ? evt.touches[0] : evt,\n        ghostMatrix = ghostEl && matrix(ghostEl, true),\n        scaleX = ghostEl && ghostMatrix && ghostMatrix.a,\n        scaleY = ghostEl && ghostMatrix && ghostMatrix.d,\n        relativeScrollOffset =\n          PositionGhostAbsolutely &&\n          ghostRelativeParent &&\n          getRelativeScrollOffset(ghostRelativeParent),\n        dx =\n          (touch.clientX - tapEvt.clientX + fallbackOffset.x) / (scaleX || 1) +\n          (relativeScrollOffset\n            ? relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0]\n            : 0) /\n            (scaleX || 1),\n        dy =\n          (touch.clientY - tapEvt.clientY + fallbackOffset.y) / (scaleY || 1) +\n          (relativeScrollOffset\n            ? relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1]\n            : 0) /\n            (scaleY || 1);\n\n      // only set the status to dragging, when we are actually dragging\n      //@ts-ignore\n      if (!Sortable.active && !awaitingDragStarted) {\n        if (\n          fallbackTolerance &&\n          Math.max(\n            Math.abs(touch.clientX - this._lastX),\n            Math.abs(touch.clientY - this._lastY)\n          ) < fallbackTolerance\n        ) {\n          return;\n        }\n        this._onDragStart(evt, true);\n      }\n\n      if (ghostEl) {\n        if (ghostMatrix) {\n          ghostMatrix.e += dx - (lastDx || 0);\n          ghostMatrix.f += dy - (lastDy || 0);\n        } else {\n          ghostMatrix = {\n            a: 1,\n            b: 0,\n            c: 0,\n            d: 1,\n            e: dx,\n            f: dy,\n          };\n        }\n\n        let cssMatrix = `matrix(${ghostMatrix.a},${ghostMatrix.b},${ghostMatrix.c},${ghostMatrix.d},${ghostMatrix.e},${ghostMatrix.f})`;\n\n        css(ghostEl, \"webkitTransform\", cssMatrix);\n        css(ghostEl, \"mozTransform\", cssMatrix);\n        css(ghostEl, \"msTransform\", cssMatrix);\n        css(ghostEl, \"transform\", cssMatrix);\n\n        lastDx = dx;\n        lastDy = dy;\n\n        touchEvt = touch;\n      }\n\n      evt.cancelable && evt.preventDefault();\n    }\n  },\n\n  _appendGhost: function () {\n    // Bug if using scale(): https://stackoverflow.com/questions/2637058\n    // Not being adjusted for\n    if (!ghostEl) {\n      let container = this.options.fallbackOnBody ? document.body : rootEl,\n        rect = getRect(dragEl, true, PositionGhostAbsolutely, true, container),\n        options = this.options;\n\n      // Position absolutely\n      if (PositionGhostAbsolutely) {\n        // Get relatively positioned parent\n        ghostRelativeParent = container;\n\n        while (\n          //@ts-ignore\n          css(ghostRelativeParent, \"position\") === \"static\" &&\n          //@ts-ignore\n          css(ghostRelativeParent, \"transform\") === \"none\" &&\n          ghostRelativeParent !== document\n        ) {\n          ghostRelativeParent = ghostRelativeParent.parentNode;\n        }\n\n        if (\n          ghostRelativeParent !== document.body &&\n          ghostRelativeParent !== document.documentElement\n        ) {\n          if (ghostRelativeParent === document)\n            ghostRelativeParent = getWindowScrollingElement();\n\n          rect.top += ghostRelativeParent.scrollTop;\n          rect.left += ghostRelativeParent.scrollLeft;\n        } else {\n          ghostRelativeParent = getWindowScrollingElement();\n        }\n        ghostRelativeParentInitialScroll = getRelativeScrollOffset(\n          ghostRelativeParent\n        );\n      }\n\n      ghostEl = dragEl.cloneNode(true);\n\n      toggleClass(ghostEl, options.ghostClass, false);\n      toggleClass(ghostEl, options.fallbackClass, true);\n      toggleClass(ghostEl, options.dragClass, true);\n\n      css(ghostEl, \"transition\", \"\");\n      css(ghostEl, \"transform\", \"\");\n\n      css(ghostEl, \"box-sizing\", \"border-box\");\n      css(ghostEl, \"margin\", 0);\n      css(ghostEl, \"top\", rect.top);\n      css(ghostEl, \"left\", rect.left);\n      css(ghostEl, \"width\", rect.width);\n      css(ghostEl, \"height\", rect.height);\n      css(ghostEl, \"opacity\", \"0.8\");\n      css(ghostEl, \"position\", PositionGhostAbsolutely ? \"absolute\" : \"fixed\");\n      css(ghostEl, \"zIndex\", \"100000\");\n      css(ghostEl, \"pointerEvents\", \"none\");\n\n      //@ts-ignore\n      Sortable.ghost = ghostEl;\n\n      container.appendChild(ghostEl);\n\n      // Set transform-origin\n      css(\n        ghostEl,\n        \"transform-origin\",\n        (tapDistanceLeft / parseInt(ghostEl.style.width)) * 100 +\n          \"% \" +\n          (tapDistanceTop / parseInt(ghostEl.style.height)) * 100 +\n          \"%\"\n      );\n    }\n  },\n\n  _onDragStart: function (/**Event*/ evt, /**boolean*/ fallback) {\n    let _this = this;\n    let dataTransfer = evt.dataTransfer;\n    let options = _this.options;\n\n    pluginEvent(\"dragStart\", this, { evt });\n    //@ts-ignore\n    if (Sortable.eventCanceled) {\n      this._onDrop();\n      return;\n    }\n\n    pluginEvent(\"setupClone\", this);\n    //@ts-ignore\n    if (!Sortable.eventCanceled) {\n      cloneEl = clone(dragEl);\n\n      cloneEl.draggable = false;\n      cloneEl.style[\"will-change\"] = \"\";\n\n      this._hideClone();\n\n      toggleClass(cloneEl, this.options.chosenClass, false);\n      //@ts-ignore\n      Sortable.clone = cloneEl;\n    }\n\n    // #1143: IFrame support workaround\n    _this.cloneId = _nextTick(function () {\n      pluginEvent(\"clone\", _this);\n      //@ts-ignore\n      if (Sortable.eventCanceled) return;\n\n      if (!_this.options.removeCloneOnHide) {\n        rootEl.insertBefore(cloneEl, dragEl);\n      }\n      _this._hideClone();\n\n      _dispatchEvent({\n        sortable: _this,\n        name: \"clone\",\n      });\n    });\n\n    !fallback && toggleClass(dragEl, options.dragClass, true);\n\n    // Set proper drop events\n    if (fallback) {\n      ignoreNextClick = true;\n      _this._loopId = setInterval(_this._emulateDragOver, 50);\n    } else {\n      // Undo what was set in _prepareDragStart before drag started\n      off(document, \"mouseup\", _this._onDrop);\n      off(document, \"touchend\", _this._onDrop);\n      off(document, \"touchcancel\", _this._onDrop);\n\n      if (dataTransfer) {\n        dataTransfer.effectAllowed = \"move\";\n        options.setData && options.setData.call(_this, dataTransfer, dragEl);\n      }\n\n      on(document, \"drop\", _this);\n\n      // #1276 fix:\n      css(dragEl, \"transform\", \"translateZ(0)\");\n    }\n\n    awaitingDragStarted = true;\n\n    _this._dragStartId = _nextTick(\n      _this._dragStarted.bind(_this, fallback, evt)\n    );\n    on(document, \"selectstart\", _this);\n\n    moved = true;\n\n    if (Safari) {\n      css(document.body, \"user-select\", \"none\");\n    }\n  },\n\n  // Returns true - if no further action is needed (either inserted or another condition)\n  _onDragOver: function (/**Event*/ evt) {\n    let el = this.el,\n      target = evt.target,\n      dragRect,\n      targetRect,\n      revert,\n      options = this.options,\n      group = options.group,\n      //@ts-ignore\n      activeSortable = Sortable.active,\n      isOwner = activeGroup === group,\n      canSort = options.sort,\n      fromSortable = putSortable || activeSortable,\n      vertical,\n      _this = this,\n      completedFired = false;\n\n    if (_silent) return;\n\n    function dragOverEvent(name, extra) {\n      pluginEvent(name, _this, {\n        evt,\n        isOwner,\n        axis: vertical ? \"vertical\" : \"horizontal\",\n        revert,\n        dragRect,\n        targetRect,\n        canSort,\n        fromSortable,\n        target,\n        completed,\n        onMove(target, after) {\n          return onMove(\n            rootEl,\n            el,\n            dragEl,\n            dragRect,\n            target,\n            //@ts-ignore\n            getRect(target),\n            evt,\n            after\n          );\n        },\n        changed,\n        ...extra,\n      });\n    }\n\n    // Capture animation state\n    function capture() {\n      //@ts-ignore\n      dragOverEvent(\"dragOverAnimationCapture\");\n\n      _this.captureAnimationState();\n      if (_this !== fromSortable) {\n        fromSortable.captureAnimationState();\n      }\n    }\n\n    // Return invocation when dragEl is inserted (or completed)\n    function completed(insertion) {\n      dragOverEvent(\"dragOverCompleted\", { insertion });\n\n      if (insertion) {\n        // Clones must be hidden before folding animation to capture dragRectAbsolute properly\n        if (isOwner) {\n          activeSortable._hideClone();\n        } else {\n          activeSortable._showClone(_this);\n        }\n\n        if (_this !== fromSortable) {\n          // Set ghost class to new sortable's ghost class\n          toggleClass(\n            dragEl,\n            putSortable\n              ? putSortable.options.ghostClass\n              : activeSortable.options.ghostClass,\n            false\n          );\n          toggleClass(dragEl, options.ghostClass, true);\n        }\n\n        //@ts-ignore\n        if (putSortable !== _this && _this !== Sortable.active) {\n          putSortable = _this;\n          //@ts-ignore\n        } else if (_this === Sortable.active && putSortable) {\n          putSortable = null;\n        }\n\n        // Animation\n        if (fromSortable === _this) {\n          _this._ignoreWhileAnimating = target;\n        }\n        _this.animateAll(function () {\n          //@ts-ignore\n          dragOverEvent(\"dragOverAnimationComplete\");\n          _this._ignoreWhileAnimating = null;\n        });\n        if (_this !== fromSortable) {\n          fromSortable.animateAll();\n          fromSortable._ignoreWhileAnimating = null;\n        }\n      }\n\n      // Null lastTarget if it is not inside a previously swapped element\n      if (\n        (target === dragEl && !dragEl.animated) ||\n        (target === el && !target.animated)\n      ) {\n        lastTarget = null;\n      }\n\n      // no bubbling and not fallback\n      if (!options.dragoverBubble && !evt.rootEl && target !== document) {\n        dragEl.parentNode[expando]._isOutsideThisEl(evt.target);\n\n        // Do not detect for empty insert if already inserted\n        !insertion && nearestEmptyInsertDetectEvent(evt);\n      }\n\n      !options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();\n\n      return (completedFired = true);\n    }\n\n    // Call when dragEl has been inserted\n    function changed() {\n      //@ts-ignore\n      newIndex = index(dragEl);\n      newDraggableIndex = index(dragEl, options.draggable);\n      _dispatchEvent({\n        sortable: _this,\n        name: \"change\",\n        toEl: el,\n        newIndex,\n        newDraggableIndex,\n        originalEvent: evt,\n      });\n    }\n\n    if (evt.preventDefault !== void 0) {\n      evt.cancelable && evt.preventDefault();\n    }\n\n    target = closest(target, options.draggable, el, true);\n\n    //@ts-ignore\n    dragOverEvent(\"dragOver\");\n    //@ts-ignore\n    if (Sortable.eventCanceled) return completedFired;\n\n    if (\n      dragEl.contains(evt.target) ||\n      (target.animated && target.animatingX && target.animatingY) ||\n      _this._ignoreWhileAnimating === target\n    ) {\n      return completed(false);\n    }\n\n    ignoreNextClick = false;\n\n    if (\n      activeSortable &&\n      !options.disabled &&\n      (isOwner\n        ? canSort || (revert = !rootEl.contains(dragEl)) // Reverting item into the original list\n        : putSortable === this ||\n          ((this.lastPutMode = activeGroup.checkPull(\n            this,\n            activeSortable,\n            dragEl,\n            evt\n          )) &&\n            group.checkPut(this, activeSortable, dragEl, evt)))\n    ) {\n      vertical = this._getDirection(evt, target) === \"vertical\";\n\n      //@ts-ignore\n      dragRect = getRect(dragEl);\n\n      //@ts-ignore\n      dragOverEvent(\"dragOverValid\");\n      //@ts-ignore\n      if (Sortable.eventCanceled) return completedFired;\n\n      if (revert) {\n        parentEl = rootEl; // actualization\n        capture();\n\n        this._hideClone();\n\n        //@ts-ignore\n        dragOverEvent(\"revert\");\n\n        //@ts-ignore\n        if (!Sortable.eventCanceled) {\n          if (nextEl) {\n            rootEl.insertBefore(dragEl, nextEl);\n          } else {\n            rootEl.appendChild(dragEl);\n          }\n        }\n\n        return completed(true);\n      }\n\n      let elLastChild = lastChild(el, options.draggable);\n\n      if (\n        !elLastChild ||\n        (_ghostIsLast(evt, vertical, this) && !elLastChild.animated)\n      ) {\n        // If already at end of list: Do not insert\n        if (elLastChild === dragEl) {\n          return completed(false);\n        }\n\n        // assign target only if condition is true\n        if (elLastChild && el === evt.target) {\n          target = elLastChild;\n        }\n\n        if (target) {\n          //@ts-ignore\n          targetRect = getRect(target);\n        }\n\n        if (\n          onMove(\n            rootEl,\n            el,\n            dragEl,\n            dragRect,\n            target,\n            targetRect,\n            evt,\n            !!target\n          ) !== false\n        ) {\n          capture();\n          el.appendChild(dragEl);\n          parentEl = el; // actualization\n\n          changed();\n          return completed(true);\n        }\n      } else if (target.parentNode === el) {\n        //@ts-ignore\n        targetRect = getRect(target);\n        let direction = 0,\n          targetBeforeFirstSwap,\n          differentLevel = dragEl.parentNode !== el,\n          differentRowCol = !_dragElInRowColumn(\n            (dragEl.animated && dragEl.toRect) || dragRect,\n            (target.animated && target.toRect) || targetRect,\n            vertical\n          ),\n          side1 = vertical ? \"top\" : \"left\",\n          scrolledPastTop =\n            isScrolledPast(target, \"top\", \"top\") ||\n            isScrolledPast(dragEl, \"top\", \"top\"),\n          scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;\n\n        if (lastTarget !== target) {\n          targetBeforeFirstSwap = targetRect[side1];\n          pastFirstInvertThresh = false;\n          isCircumstantialInvert =\n            (!differentRowCol && options.invertSwap) || differentLevel;\n        }\n\n        direction = _getSwapDirection(\n          evt,\n          target,\n          targetRect,\n          vertical,\n          differentRowCol ? 1 : options.swapThreshold,\n          options.invertedSwapThreshold == null\n            ? options.swapThreshold\n            : options.invertedSwapThreshold,\n          isCircumstantialInvert,\n          lastTarget === target\n        );\n\n        let sibling;\n\n        if (direction !== 0) {\n          // Check if target is beside dragEl in respective direction (ignoring hidden elements)\n          //@ts-ignore\n          let dragIndex = index(dragEl);\n\n          do {\n            dragIndex -= direction;\n            sibling = parentEl.children[dragIndex];\n          } while (\n            sibling &&\n            //@ts-ignore\n            (css(sibling, \"display\") === \"none\" || sibling === ghostEl)\n          );\n        }\n        // If dragEl is already beside target: Do not insert\n        if (direction === 0 || sibling === target) {\n          return completed(false);\n        }\n\n        lastTarget = target;\n\n        lastDirection = direction;\n\n        let nextSibling = target.nextElementSibling,\n          after = false;\n\n        after = direction === 1;\n\n        let moveVector = onMove(\n          rootEl,\n          el,\n          dragEl,\n          dragRect,\n          target,\n          targetRect,\n          evt,\n          after\n        );\n\n        if (moveVector !== false) {\n          if (moveVector === 1 || moveVector === -1) {\n            after = moveVector === 1;\n          }\n\n          _silent = true;\n          setTimeout(_unsilent, 30);\n\n          capture();\n\n          if (after && !nextSibling) {\n            el.appendChild(dragEl);\n          } else {\n            target.parentNode.insertBefore(\n              dragEl,\n              after ? nextSibling : target\n            );\n          }\n\n          // Undo chrome's scroll adjustment (has no effect on other browsers)\n          if (scrolledPastTop) {\n            scrollBy(\n              scrolledPastTop,\n              0,\n              scrollBefore - scrolledPastTop.scrollTop\n            );\n          }\n\n          parentEl = dragEl.parentNode; // actualization\n\n          // must be done before animation\n          if (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {\n            targetMoveDistance = Math.abs(\n              //@ts-ignore\n              targetBeforeFirstSwap - getRect(target)[side1]\n            );\n          }\n          changed();\n\n          return completed(true);\n        }\n      }\n\n      if (el.contains(dragEl)) {\n        return completed(false);\n      }\n    }\n\n    return false;\n  },\n\n  _ignoreWhileAnimating: null,\n\n  _offMoveEvents: function () {\n    off(document, \"mousemove\", this._onTouchMove);\n    off(document, \"touchmove\", this._onTouchMove);\n    off(document, \"pointermove\", this._onTouchMove);\n    off(document, \"dragover\", nearestEmptyInsertDetectEvent);\n    off(document, \"mousemove\", nearestEmptyInsertDetectEvent);\n    off(document, \"touchmove\", nearestEmptyInsertDetectEvent);\n  },\n\n  _offUpEvents: function () {\n    let ownerDocument = this.el.ownerDocument;\n\n    off(ownerDocument, \"mouseup\", this._onDrop);\n    off(ownerDocument, \"touchend\", this._onDrop);\n    off(ownerDocument, \"pointerup\", this._onDrop);\n    off(ownerDocument, \"touchcancel\", this._onDrop);\n    off(document, \"selectstart\", this);\n  },\n\n  _onDrop: function (/**Event*/ evt) {\n    let el = this.el,\n      options = this.options;\n\n    // Get the index of the dragged element within its parent\n    //@ts-ignore\n    newIndex = index(dragEl);\n    newDraggableIndex = index(dragEl, options.draggable);\n\n    pluginEvent(\"drop\", this, {\n      evt,\n    });\n\n    parentEl = dragEl && dragEl.parentNode;\n\n    // Get again after plugin event\n    //@ts-ignore\n    newIndex = index(dragEl);\n    newDraggableIndex = index(dragEl, options.draggable);\n\n    //@ts-ignore\n    if (Sortable.eventCanceled) {\n      this._nulling();\n      return;\n    }\n\n    awaitingDragStarted = false;\n    isCircumstantialInvert = false;\n    pastFirstInvertThresh = false;\n\n    clearInterval(this._loopId);\n\n    clearTimeout(this._dragStartTimer);\n\n    _cancelNextTick(this.cloneId);\n    _cancelNextTick(this._dragStartId);\n\n    // Unbind events\n    if (this.nativeDraggable) {\n      off(document, \"drop\", this);\n      off(el, \"dragstart\", this._onDragStart);\n    }\n    this._offMoveEvents();\n    this._offUpEvents();\n\n    if (Safari) {\n      css(document.body, \"user-select\", \"\");\n    }\n\n    css(dragEl, \"transform\", \"\");\n\n    if (evt) {\n      if (moved) {\n        evt.cancelable && evt.preventDefault();\n        !options.dropBubble && evt.stopPropagation();\n      }\n\n      ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);\n\n      if (\n        rootEl === parentEl ||\n        (putSortable && putSortable.lastPutMode !== \"clone\")\n      ) {\n        // Remove clone(s)\n        cloneEl &&\n          cloneEl.parentNode &&\n          cloneEl.parentNode.removeChild(cloneEl);\n      }\n\n      if (dragEl) {\n        if (this.nativeDraggable) {\n          off(dragEl, \"dragend\", this);\n        }\n\n        _disableDraggable(dragEl);\n        dragEl.style[\"will-change\"] = \"\";\n\n        // Remove classes\n        // ghostClass is added in dragStarted\n        if (moved && !awaitingDragStarted) {\n          toggleClass(\n            dragEl,\n            putSortable\n              ? putSortable.options.ghostClass\n              : this.options.ghostClass,\n            false\n          );\n        }\n        toggleClass(dragEl, this.options.chosenClass, false);\n\n        // Drag stop event\n        _dispatchEvent({\n          sortable: this,\n          name: \"unchoose\",\n          toEl: parentEl,\n          newIndex: null,\n          newDraggableIndex: null,\n          originalEvent: evt,\n        });\n\n        if (rootEl !== parentEl) {\n          if (newIndex >= 0) {\n            // Add event\n            _dispatchEvent({\n              rootEl: parentEl,\n              name: \"add\",\n              toEl: parentEl,\n              fromEl: rootEl,\n              originalEvent: evt,\n            });\n\n            // Remove event\n            _dispatchEvent({\n              sortable: this,\n              name: \"remove\",\n              toEl: parentEl,\n              originalEvent: evt,\n            });\n\n            // drag from one list and drop into another\n            _dispatchEvent({\n              rootEl: parentEl,\n              name: \"sort\",\n              toEl: parentEl,\n              fromEl: rootEl,\n              originalEvent: evt,\n            });\n\n            _dispatchEvent({\n              sortable: this,\n              name: \"sort\",\n              toEl: parentEl,\n              originalEvent: evt,\n            });\n          }\n\n          putSortable && putSortable.save();\n        } else {\n          if (newIndex !== oldIndex) {\n            if (newIndex >= 0) {\n              // drag & drop within the same list\n              _dispatchEvent({\n                sortable: this,\n                name: \"update\",\n                toEl: parentEl,\n                originalEvent: evt,\n              });\n\n              _dispatchEvent({\n                sortable: this,\n                name: \"sort\",\n                toEl: parentEl,\n                originalEvent: evt,\n              });\n            }\n          }\n        }\n\n        //@ts-ignore\n        if (Sortable.active) {\n          /* jshint eqnull:true */\n          if (newIndex == null || newIndex === -1) {\n            newIndex = oldIndex;\n            newDraggableIndex = oldDraggableIndex;\n          }\n\n          _dispatchEvent({\n            sortable: this,\n            name: \"end\",\n            toEl: parentEl,\n            originalEvent: evt,\n          });\n\n          // Save sorting\n          this.save();\n        }\n      }\n    }\n    this._nulling();\n  },\n\n  _nulling: function () {\n    pluginEvent(\"nulling\", this);\n    //@ts-ignore\n    rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = cloneHidden = tapEvt = touchEvt = moved = newIndex = newDraggableIndex = oldIndex = oldDraggableIndex = lastTarget = lastDirection = putSortable = activeGroup = Sortable.dragged = Sortable.ghost = Sortable.clone = Sortable.active = null;\n\n    savedInputChecked.forEach(function (el) {\n      el.checked = true;\n    });\n\n    savedInputChecked.length = lastDx = lastDy = 0;\n  },\n\n  handleEvent: function (/**Event*/ evt) {\n    switch (evt.type) {\n      case \"drop\":\n      case \"dragend\":\n        this._onDrop(evt);\n        break;\n\n      case \"dragenter\":\n      case \"dragover\":\n        if (dragEl) {\n          this._onDragOver(evt);\n          _globalDragOver(evt);\n        }\n        break;\n\n      case \"selectstart\":\n        evt.preventDefault();\n        break;\n    }\n  },\n\n  /**\n   * Serializes the item into an array of string.\n   * @returns {String[]}\n   */\n  toArray: function () {\n    let order = [],\n      el,\n      children = this.el.children,\n      i = 0,\n      n = children.length,\n      options = this.options;\n\n    for (; i < n; i++) {\n      el = children[i];\n      if (closest(el, options.draggable, this.el, false)) {\n        order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));\n      }\n    }\n\n    return order;\n  },\n\n  /**\n   * Sorts the elements according to the array.\n   * @param  {String[]}  order  order of the items\n   */\n  sort: function (order) {\n    let items = {},\n      rootEl = this.el;\n\n    this.toArray().forEach(function (id, i) {\n      let el = rootEl.children[i];\n\n      if (closest(el, this.options.draggable, rootEl, false)) {\n        items[id] = el;\n      }\n    }, this);\n\n    order.forEach(function (id) {\n      if (items[id]) {\n        rootEl.removeChild(items[id]);\n        rootEl.appendChild(items[id]);\n      }\n    });\n  },\n\n  /**\n   * Save the current sorting\n   */\n  save: function () {\n    let store = this.options.store;\n    store && store.set && store.set(this);\n  },\n\n  /**\n   * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\n   * @param   {HTMLElement}  el\n   * @param   {String}       [selector]  default: `options.draggable`\n   * @returns {HTMLElement|null}\n   */\n  closest: function (el, selector) {\n    return closest(el, selector || this.options.draggable, this.el, false);\n  },\n\n  /**\n   * Set/get option\n   * @param   {string} name\n   * @param   {*}      [value]\n   * @returns {*}\n   */\n  option: function (name, value) {\n    let options = this.options;\n\n    if (value === void 0) {\n      return options[name];\n    } else {\n      let modifiedValue = PluginManager.modifyOption(this, name, value);\n      if (typeof modifiedValue !== \"undefined\") {\n        options[name] = modifiedValue;\n      } else {\n        options[name] = value;\n      }\n\n      if (name === \"group\") {\n        _prepareGroup(options);\n      }\n    }\n  },\n\n  /**\n   * Destroy\n   */\n  destroy: function () {\n    pluginEvent(\"destroy\", this);\n    let el = this.el;\n\n    el[expando] = null;\n\n    off(el, \"mousedown\", this._onTapStart);\n    off(el, \"touchstart\", this._onTapStart);\n    off(el, \"pointerdown\", this._onTapStart);\n\n    if (this.nativeDraggable) {\n      off(el, \"dragover\", this);\n      off(el, \"dragenter\", this);\n    }\n    // Remove draggable attributes\n    Array.prototype.forEach.call(el.querySelectorAll(\"[draggable]\"), function (\n      el\n    ) {\n      el.removeAttribute(\"draggable\");\n    });\n\n    this._onDrop();\n\n    this._disableDelayedDragEvents();\n\n    sortables.splice(sortables.indexOf(this.el), 1);\n\n    this.el = el = null;\n  },\n\n  _hideClone: function () {\n    if (!cloneHidden) {\n      pluginEvent(\"hideClone\", this);\n      //@ts-ignore\n      if (Sortable.eventCanceled) return;\n\n      css(cloneEl, \"display\", \"none\");\n      if (this.options.removeCloneOnHide && cloneEl.parentNode) {\n        cloneEl.parentNode.removeChild(cloneEl);\n      }\n      cloneHidden = true;\n    }\n  },\n\n  _showClone: function (putSortable) {\n    if (putSortable.lastPutMode !== \"clone\") {\n      this._hideClone();\n      return;\n    }\n\n    if (cloneHidden) {\n      pluginEvent(\"showClone\", this);\n      //@ts-ignore\n      if (Sortable.eventCanceled) return;\n\n      // show clone at dragEl or original position\n      if (dragEl.parentNode == rootEl && !this.options.group.revertClone) {\n        rootEl.insertBefore(cloneEl, dragEl);\n      } else if (nextEl) {\n        rootEl.insertBefore(cloneEl, nextEl);\n      } else {\n        rootEl.appendChild(cloneEl);\n      }\n\n      if (this.options.group.revertClone) {\n        this.animate(dragEl, cloneEl);\n      }\n\n      css(cloneEl, \"display\", \"\");\n      cloneHidden = false;\n    }\n  },\n};\n\nfunction _globalDragOver(/**Event*/ evt) {\n  if (evt.dataTransfer) {\n    evt.dataTransfer.dropEffect = \"move\";\n  }\n  evt.cancelable && evt.preventDefault();\n}\n\nfunction onMove(\n  fromEl,\n  toEl,\n  dragEl,\n  dragRect,\n  targetEl,\n  targetRect,\n  originalEvent,\n  willInsertAfter\n) {\n  let evt,\n    sortable = fromEl[expando],\n    onMoveFn = sortable.options.onMove,\n    retVal;\n  // Support for new CustomEvent feature\n  if (window.CustomEvent && !IE11OrLess && !Edge) {\n    evt = new CustomEvent(\"move\", {\n      bubbles: true,\n      cancelable: true,\n    });\n  } else {\n    evt = document.createEvent(\"Event\");\n    evt.initEvent(\"move\", true, true);\n  }\n\n  evt.to = toEl;\n  evt.from = fromEl;\n  evt.dragged = dragEl;\n  evt.draggedRect = dragRect;\n  evt.related = targetEl || toEl;\n  //@ts-ignore\n  evt.relatedRect = targetRect || getRect(toEl);\n  evt.willInsertAfter = willInsertAfter;\n\n  evt.originalEvent = originalEvent;\n\n  fromEl.dispatchEvent(evt);\n\n  if (onMoveFn) {\n    retVal = onMoveFn.call(sortable, evt, originalEvent);\n  }\n\n  return retVal;\n}\n\nfunction _disableDraggable(el) {\n  el.draggable = false;\n}\n\nfunction _unsilent() {\n  _silent = false;\n}\n\nfunction _ghostIsLast(evt, vertical, sortable) {\n  //@ts-ignore\n  let rect = getRect(lastChild(sortable.el, sortable.options.draggable));\n  const spacer = 10;\n\n  return vertical\n    ? evt.clientX > rect.right + spacer ||\n        (evt.clientX <= rect.right &&\n          evt.clientY > rect.bottom &&\n          evt.clientX >= rect.left)\n    : (evt.clientX > rect.right && evt.clientY > rect.top) ||\n        (evt.clientX <= rect.right && evt.clientY > rect.bottom + spacer);\n}\n\nfunction _getSwapDirection(\n  evt,\n  target,\n  targetRect,\n  vertical,\n  swapThreshold,\n  invertedSwapThreshold,\n  invertSwap,\n  isLastTarget\n) {\n  let mouseOnAxis = vertical ? evt.clientY : evt.clientX,\n    targetLength = vertical ? targetRect.height : targetRect.width,\n    targetS1 = vertical ? targetRect.top : targetRect.left,\n    targetS2 = vertical ? targetRect.bottom : targetRect.right,\n    invert = false;\n\n  if (!invertSwap) {\n    // Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold\n    if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) {\n      // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2\n      // check if past first invert threshold on side opposite of lastDirection\n      if (\n        !pastFirstInvertThresh &&\n        (lastDirection === 1\n          ? mouseOnAxis > targetS1 + (targetLength * invertedSwapThreshold) / 2\n          : mouseOnAxis < targetS2 - (targetLength * invertedSwapThreshold) / 2)\n      ) {\n        // past first invert threshold, do not restrict inverted threshold to dragEl shadow\n        pastFirstInvertThresh = true;\n      }\n\n      if (!pastFirstInvertThresh) {\n        // dragEl shadow (target move distance shadow)\n        if (\n          lastDirection === 1\n            ? mouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow\n            : mouseOnAxis > targetS2 - targetMoveDistance\n        ) {\n          return -lastDirection;\n        }\n      } else {\n        invert = true;\n      }\n    } else {\n      // Regular\n      if (\n        mouseOnAxis > targetS1 + (targetLength * (1 - swapThreshold)) / 2 &&\n        mouseOnAxis < targetS2 - (targetLength * (1 - swapThreshold)) / 2\n      ) {\n        return _getInsertDirection(target);\n      }\n    }\n  }\n\n  invert = invert || invertSwap;\n\n  if (invert) {\n    // Invert of regular\n    if (\n      mouseOnAxis < targetS1 + (targetLength * invertedSwapThreshold) / 2 ||\n      mouseOnAxis > targetS2 - (targetLength * invertedSwapThreshold) / 2\n    ) {\n      return mouseOnAxis > targetS1 + targetLength / 2 ? 1 : -1;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * Gets the direction dragEl must be swapped relative to target in order to make it\n * seem that dragEl has been \"inserted\" into that element's position\n * @param  {HTMLElement} target       The target whose position dragEl is being inserted at\n * @return {Number}                   Direction dragEl must be swapped\n */\nfunction _getInsertDirection(target) {\n  //@ts-ignore\n  if (index(dragEl) < index(target)) {\n    return 1;\n  } else {\n    return -1;\n  }\n}\n\n/**\n * Generate id\n * @param   {HTMLElement} el\n * @returns {String}\n * @private\n */\nfunction _generateId(el) {\n  let str = el.tagName + el.className + el.src + el.href + el.textContent,\n    i = str.length,\n    sum = 0;\n\n  while (i--) {\n    sum += str.charCodeAt(i);\n  }\n\n  return sum.toString(36);\n}\n\nfunction _saveInputCheckedState(root) {\n  savedInputChecked.length = 0;\n\n  let inputs = root.getElementsByTagName(\"input\");\n  let idx = inputs.length;\n\n  while (idx--) {\n    let el = inputs[idx];\n    el.checked && savedInputChecked.push(el);\n  }\n}\n\nfunction _nextTick(fn) {\n  return setTimeout(fn, 0);\n}\n\nfunction _cancelNextTick(id) {\n  return clearTimeout(id);\n}\n\n// Fixed #973:\nif (documentExists) {\n  on(document, \"touchmove\", function (evt) {\n    //@ts-ignore\n    if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {\n      evt.preventDefault();\n    }\n  });\n}\n\n// Export utils\nSortable.utils = {\n  on: on,\n  off: off,\n  css: css,\n  find: find,\n  is: function (el, selector) {\n    return !!closest(el, selector, el, false);\n  },\n  extend: extend,\n  throttle: throttle,\n  closest: closest,\n  toggleClass: toggleClass,\n  clone: clone,\n  index: index,\n  nextTick: _nextTick,\n  cancelNextTick: _cancelNextTick,\n  detectDirection: _detectDirection,\n  getChild: getChild,\n};\n\n/**\n * Get the Sortable instance of an element\n * @param  {HTMLElement} element The element\n * @return {Sortable|undefined}         The instance of Sortable\n */\nSortable.get = function (element) {\n  return element[expando];\n};\n\n/**\n * Mount a plugin to Sortable\n * @param  {...SortablePlugin|SortablePlugin[]} plugins       Plugins being mounted\n */\nSortable.mount = function (...plugins) {\n  if (plugins[0].constructor === Array) plugins = plugins[0];\n\n  plugins.forEach((plugin) => {\n    if (!plugin.prototype || !plugin.prototype.constructor) {\n      throw `Sortable: Mounted plugin must be a constructor function, not ${{}.toString.call(\n        plugin\n      )}`;\n    }\n    if (plugin.utils) Sortable.utils = { ...Sortable.utils, ...plugin.utils };\n\n    PluginManager.mount(plugin);\n  });\n};\n\n/**\n * Create sortable instance\n * @param {HTMLElement}  el\n * @param {Object}      [options]\n */\nSortable.create = function (el, options) {\n  return new Sortable(el, options);\n};\n\n// Export\nSortable.version = version;\n\nexport default Sortable;\n","import { toggleClass, index } from \"../../../utils/src\";\n\nlet lastSwapEl;\n\nfunction SwapPlugin() {\n  function Swap() {\n    this.defaults = {\n      swapClass: \"sortable-swap-highlight\",\n    };\n  }\n\n  Swap.prototype = {\n    dragStart({ dragEl }) {\n      lastSwapEl = dragEl;\n    },\n    dragOverValid({\n      completed,\n      target,\n      onMove,\n      activeSortable,\n      changed,\n      cancel,\n    }) {\n      if (!activeSortable.options.swap) return;\n      let el = this.sortable.el,\n        options = this.options;\n      if (target && target !== el) {\n        let prevSwapEl = lastSwapEl;\n        if (onMove(target) !== false) {\n          toggleClass(target, options.swapClass, true);\n          lastSwapEl = target;\n        } else {\n          lastSwapEl = null;\n        }\n\n        if (prevSwapEl && prevSwapEl !== lastSwapEl) {\n          toggleClass(prevSwapEl, options.swapClass, false);\n        }\n      }\n      changed();\n\n      completed(true);\n      cancel();\n    },\n    drop({ activeSortable, putSortable, dragEl }) {\n      let toSortable = putSortable || this.sortable;\n      let options = this.options;\n      lastSwapEl && toggleClass(lastSwapEl, options.swapClass, false);\n      if (\n        lastSwapEl &&\n        (options.swap || (putSortable && putSortable.options.swap))\n      ) {\n        if (dragEl !== lastSwapEl) {\n          toSortable.captureAnimationState();\n          if (toSortable !== activeSortable)\n            activeSortable.captureAnimationState();\n          swapNodes(dragEl, lastSwapEl);\n\n          toSortable.animateAll();\n          if (toSortable !== activeSortable) activeSortable.animateAll();\n        }\n      }\n    },\n    nulling() {\n      lastSwapEl = null;\n    },\n  };\n\n  return Object.assign(Swap, {\n    pluginName: \"swap\",\n    eventProperties() {\n      return {\n        swapItem: lastSwapEl,\n      };\n    },\n  });\n}\n\nfunction swapNodes(n1, n2) {\n  let p1 = n1.parentNode,\n    p2 = n2.parentNode,\n    i1,\n    i2;\n\n  if (!p1 || !p2 || p1.isEqualNode(n2) || p2.isEqualNode(n1)) return;\n\n  //@ts-ignore\n  i1 = index(n1);\n  //@ts-ignore\n  i2 = index(n2);\n\n  if (p1.isEqualNode(p2) && i1 < i2) {\n    i2++;\n  }\n  p1.insertBefore(n2, p1.children[i1]);\n  p2.insertBefore(n1, p2.children[i2]);\n}\n\nexport default SwapPlugin;\n","import {\n  getRect,\n  css,\n  matrix,\n  isRectEqual,\n  indexOfObject,\n} from \"../../utils/src\";\nimport * as Sortable from \"./Sortable\";\n\nexport default function AnimationStateManager() {\n  let animationStates = [],\n    animationCallbackId;\n\n  return {\n    captureAnimationState() {\n      animationStates = [];\n      if (!this.options.animation) return;\n      let children = [].slice.call(this.el.children);\n\n      children.forEach((child) => {\n        //@ts-ignore\n        if (css(child, \"display\") === \"none\" || child === Sortable.ghost)\n          return;\n        animationStates.push({\n          target: child,\n          //@ts-ignore\n          rect: getRect(child),\n        });\n        let fromRect = { ...animationStates[animationStates.length - 1].rect };\n\n        // If animating: compensate for current animation\n        if (child.thisAnimationDuration) {\n          let childMatrix = matrix(child, true);\n          if (childMatrix) {\n            fromRect.top -= childMatrix.f;\n            fromRect.left -= childMatrix.e;\n          }\n        }\n\n        child.fromRect = fromRect;\n      });\n    },\n\n    addAnimationState(state) {\n      animationStates.push(state);\n    },\n\n    removeAnimationState(target) {\n      animationStates.splice(indexOfObject(animationStates, { target }), 1);\n    },\n\n    animateAll(callback) {\n      if (!this.options.animation) {\n        clearTimeout(animationCallbackId);\n        if (typeof callback === \"function\") callback();\n        return;\n      }\n\n      let animating = false,\n        animationTime = 0;\n\n      animationStates.forEach((state) => {\n        let time = 0,\n          animatingThis = false,\n          target = state.target,\n          fromRect = target.fromRect,\n          //@ts-ignore\n          toRect = getRect(target),\n          prevFromRect = target.prevFromRect,\n          prevToRect = target.prevToRect,\n          animatingRect = state.rect,\n          targetMatrix = matrix(target, true);\n\n        if (targetMatrix) {\n          // Compensate for current animation\n          toRect.top -= targetMatrix.f;\n          toRect.left -= targetMatrix.e;\n        }\n\n        target.toRect = toRect;\n\n        if (target.thisAnimationDuration) {\n          // Could also check if animatingRect is between fromRect and toRect\n          if (\n            isRectEqual(prevFromRect, toRect) &&\n            !isRectEqual(fromRect, toRect) &&\n            // Make sure animatingRect is on line between toRect & fromRect\n            (animatingRect.top - toRect.top) /\n              (animatingRect.left - toRect.left) ===\n              (fromRect.top - toRect.top) / (fromRect.left - toRect.left)\n          ) {\n            // If returning to same place as started from animation and on same axis\n            time = calculateRealTime(\n              animatingRect,\n              prevFromRect,\n              prevToRect,\n              this.options\n            );\n          }\n        }\n\n        // if fromRect != toRect: animate\n        if (!isRectEqual(toRect, fromRect)) {\n          target.prevFromRect = fromRect;\n          target.prevToRect = toRect;\n\n          if (!time) {\n            time = this.options.animation;\n          }\n          this.animate(target, animatingRect, toRect, time);\n        }\n\n        if (time) {\n          animating = true;\n          animationTime = Math.max(animationTime, time);\n          clearTimeout(target.animationResetTimer);\n          target.animationResetTimer = setTimeout(function () {\n            target.animationTime = 0;\n            target.prevFromRect = null;\n            target.fromRect = null;\n            target.prevToRect = null;\n            target.thisAnimationDuration = null;\n          }, time);\n          target.thisAnimationDuration = time;\n        }\n      });\n\n      clearTimeout(animationCallbackId);\n      if (!animating) {\n        if (typeof callback === \"function\") callback();\n      } else {\n        animationCallbackId = setTimeout(function () {\n          if (typeof callback === \"function\") callback();\n        }, animationTime);\n      }\n      animationStates = [];\n    },\n\n    animate(target, currentRect, toRect, duration) {\n      if (duration) {\n        css(target, \"transition\", \"\");\n        css(target, \"transform\", \"\");\n        //@ts-ignore\n        let elMatrix = matrix(this.el),\n          scaleX = elMatrix && elMatrix.a,\n          scaleY = elMatrix && elMatrix.d,\n          translateX = (currentRect.left - toRect.left) / (scaleX || 1),\n          translateY = (currentRect.top - toRect.top) / (scaleY || 1);\n\n        target.animatingX = !!translateX;\n        target.animatingY = !!translateY;\n\n        css(\n          target,\n          \"transform\",\n          \"translate3d(\" + translateX + \"px,\" + translateY + \"px,0)\"\n        );\n\n        this.forRepaintDummy = repaint(target); // repaint\n\n        css(\n          target,\n          \"transition\",\n          \"transform \" +\n            duration +\n            \"ms\" +\n            (this.options.easing ? \" \" + this.options.easing : \"\")\n        );\n        css(target, \"transform\", \"translate3d(0,0,0)\");\n        typeof target.animated === \"number\" && clearTimeout(target.animated);\n        target.animated = setTimeout(function () {\n          css(target, \"transition\", \"\");\n          css(target, \"transform\", \"\");\n          target.animated = false;\n\n          target.animatingX = false;\n          target.animatingY = false;\n        }, duration);\n      }\n    },\n  };\n}\n\nfunction repaint(target) {\n  return target.offsetWidth;\n}\n\nfunction calculateRealTime(animatingRect, fromRect, toRect, options) {\n  return (\n    (Math.sqrt(\n      Math.pow(fromRect.top - animatingRect.top, 2) +\n        Math.pow(fromRect.left - animatingRect.left, 2)\n    ) /\n      Math.sqrt(\n        Math.pow(fromRect.top - toRect.top, 2) +\n          Math.pow(fromRect.left - toRect.left, 2)\n      )) *\n    options.animation\n  );\n}\n","import {\n  toggleClass,\n  getRect,\n  index,\n  closest,\n  on,\n  off,\n  clone,\n  css,\n  setRect,\n  unsetRect,\n  matrix,\n  expando,\n} from \"../../../utils/src\";\n\nimport dispatchEvent from \"../../../sortable/src/EventDispatcher\";\n\nlet multiDragElements = [],\n  multiDragClones = [],\n  lastMultiDragSelect, // for selection with modifier key down (SHIFT)\n  multiDragSortable,\n  initialFolding = false, // Initial multi-drag fold when drag started\n  folding = false, // Folding any other time\n  dragStarted = false,\n  dragEl,\n  clonesFromRect,\n  clonesHidden;\n\nfunction MultiDragPlugin() {\n  function MultiDrag(sortable) {\n    // Bind all private methods\n    for (let fn in this) {\n      if (fn.charAt(0) === \"_\" && typeof this[fn] === \"function\") {\n        this[fn] = this[fn].bind(this);\n      }\n    }\n\n    if (sortable.options.supportPointer) {\n      on(document, \"pointerup\", this._deselectMultiDrag);\n    } else {\n      on(document, \"mouseup\", this._deselectMultiDrag);\n      on(document, \"touchend\", this._deselectMultiDrag);\n    }\n\n    on(document, \"keydown\", this._checkKeyDown);\n    on(document, \"keyup\", this._checkKeyUp);\n\n    this.defaults = {\n      selectedClass: \"sortable-selected\",\n      multiDragKey: null,\n      setData(dataTransfer, dragEl) {\n        let data = \"\";\n        if (multiDragElements.length && multiDragSortable === sortable) {\n          multiDragElements.forEach((multiDragElement, i) => {\n            data += (!i ? \"\" : \", \") + multiDragElement.textContent;\n          });\n        } else {\n          data = dragEl.textContent;\n        }\n        dataTransfer.setData(\"Text\", data);\n      },\n    };\n  }\n\n  MultiDrag.prototype = {\n    multiDragKeyDown: false,\n    isMultiDrag: false,\n\n    delayStartGlobal({ dragEl: dragged }) {\n      dragEl = dragged;\n    },\n\n    delayEnded() {\n      this.isMultiDrag = ~multiDragElements.indexOf(dragEl);\n    },\n\n    setupClone({ sortable, cancel }) {\n      if (!this.isMultiDrag) return;\n      for (let i = 0; i < multiDragElements.length; i++) {\n        multiDragClones.push(clone(multiDragElements[i]));\n\n        multiDragClones[i].sortableIndex = multiDragElements[i].sortableIndex;\n\n        multiDragClones[i].draggable = false;\n        multiDragClones[i].style[\"will-change\"] = \"\";\n\n        toggleClass(multiDragClones[i], this.options.selectedClass, false);\n        multiDragElements[i] === dragEl &&\n          toggleClass(multiDragClones[i], this.options.chosenClass, false);\n      }\n\n      sortable._hideClone();\n      cancel();\n    },\n\n    clone({ sortable, rootEl, dispatchSortableEvent, cancel }) {\n      if (!this.isMultiDrag) return;\n      if (!this.options.removeCloneOnHide) {\n        if (multiDragElements.length && multiDragSortable === sortable) {\n          insertMultiDragClones(true, rootEl);\n          dispatchSortableEvent(\"clone\");\n\n          cancel();\n        }\n      }\n    },\n\n    showClone({ cloneNowShown, rootEl, cancel }) {\n      if (!this.isMultiDrag) return;\n      insertMultiDragClones(false, rootEl);\n      multiDragClones.forEach((clone) => {\n        css(clone, \"display\", \"\");\n      });\n\n      cloneNowShown();\n      clonesHidden = false;\n      cancel();\n    },\n\n    hideClone({ sortable, cloneNowHidden, cancel }) {\n      if (!this.isMultiDrag) return;\n      multiDragClones.forEach((clone) => {\n        css(clone, \"display\", \"none\");\n        if (this.options.removeCloneOnHide && clone.parentNode) {\n          clone.parentNode.removeChild(clone);\n        }\n      });\n\n      cloneNowHidden();\n      clonesHidden = true;\n      cancel();\n    },\n\n    dragStartGlobal({ sortable }) {\n      if (!this.isMultiDrag && multiDragSortable) {\n        multiDragSortable.multiDrag._deselectMultiDrag();\n      }\n\n      multiDragElements.forEach((multiDragElement) => {\n        //@ts-ignore\n        multiDragElement.sortableIndex = index(multiDragElement);\n      });\n\n      // Sort multi-drag elements\n      multiDragElements = multiDragElements.sort(function (a, b) {\n        return a.sortableIndex - b.sortableIndex;\n      });\n      dragStarted = true;\n    },\n\n    dragStarted({ sortable }) {\n      if (!this.isMultiDrag) return;\n      if (this.options.sort) {\n        // Capture rects,\n        // hide multi drag elements (by positioning them absolute),\n        // set multi drag elements rects to dragRect,\n        // show multi drag elements,\n        // animate to rects,\n        // unset rects & remove from DOM\n\n        sortable.captureAnimationState();\n\n        if (this.options.animation) {\n          multiDragElements.forEach((multiDragElement) => {\n            if (multiDragElement === dragEl) return;\n            css(multiDragElement, \"position\", \"absolute\");\n          });\n\n          //@ts-ignore\n          let dragRect = getRect(dragEl, false, true, true);\n\n          multiDragElements.forEach((multiDragElement) => {\n            if (multiDragElement === dragEl) return;\n            setRect(multiDragElement, dragRect);\n          });\n\n          folding = true;\n          initialFolding = true;\n        }\n      }\n\n      sortable.animateAll(() => {\n        folding = false;\n        initialFolding = false;\n\n        if (this.options.animation) {\n          multiDragElements.forEach((multiDragElement) => {\n            unsetRect(multiDragElement);\n          });\n        }\n\n        // Remove all auxiliary multidrag items from el, if sorting enabled\n        if (this.options.sort) {\n          removeMultiDragElements();\n        }\n      });\n    },\n\n    dragOver({ target, completed, cancel }) {\n      if (folding && ~multiDragElements.indexOf(target)) {\n        completed(false);\n        cancel();\n      }\n    },\n\n    revert({ fromSortable, rootEl, sortable, dragRect }) {\n      if (multiDragElements.length > 1) {\n        // Setup unfold animation\n        multiDragElements.forEach((multiDragElement) => {\n          sortable.addAnimationState({\n            target: multiDragElement,\n            //@ts-ignore\n            rect: folding ? getRect(multiDragElement) : dragRect,\n          });\n\n          unsetRect(multiDragElement);\n\n          multiDragElement.fromRect = dragRect;\n\n          fromSortable.removeAnimationState(multiDragElement);\n        });\n        folding = false;\n        insertMultiDragElements(!this.options.removeCloneOnHide, rootEl);\n      }\n    },\n\n    dragOverCompleted({\n      sortable,\n      isOwner,\n      insertion,\n      activeSortable,\n      parentEl,\n      putSortable,\n    }) {\n      let options = this.options;\n      if (insertion) {\n        // Clones must be hidden before folding animation to capture dragRectAbsolute properly\n        if (isOwner) {\n          activeSortable._hideClone();\n        }\n\n        initialFolding = false;\n        // If leaving sort:false root, or already folding - Fold to new location\n        if (\n          options.animation &&\n          multiDragElements.length > 1 &&\n          (folding ||\n            (!isOwner && !activeSortable.options.sort && !putSortable))\n        ) {\n          //@ts-ignore\n          // Fold: Set all multi drag elements's rects to dragEl's rect when multi-drag elements are invisible\n          let dragRectAbsolute = getRect(dragEl, false, true, true);\n\n          multiDragElements.forEach((multiDragElement) => {\n            if (multiDragElement === dragEl) return;\n            setRect(multiDragElement, dragRectAbsolute);\n\n            // Move element(s) to end of parentEl so that it does not interfere with multi-drag clones insertion if they are inserted\n            // while folding, and so that we can capture them again because old sortable will no longer be fromSortable\n            parentEl.appendChild(multiDragElement);\n          });\n\n          folding = true;\n        }\n\n        // Clones must be shown (and check to remove multi drags) after folding when interfering multiDragElements are moved out\n        if (!isOwner) {\n          // Only remove if not folding (folding will remove them anyways)\n          if (!folding) {\n            removeMultiDragElements();\n          }\n\n          if (multiDragElements.length > 1) {\n            let clonesHiddenBefore = clonesHidden;\n            activeSortable._showClone(sortable);\n\n            // Unfold animation for clones if showing from hidden\n            if (\n              activeSortable.options.animation &&\n              !clonesHidden &&\n              clonesHiddenBefore\n            ) {\n              multiDragClones.forEach((clone) => {\n                activeSortable.addAnimationState({\n                  target: clone,\n                  rect: clonesFromRect,\n                });\n\n                clone.fromRect = clonesFromRect;\n                clone.thisAnimationDuration = null;\n              });\n            }\n          } else {\n            activeSortable._showClone(sortable);\n          }\n        }\n      }\n    },\n\n    dragOverAnimationCapture({ dragRect, isOwner, activeSortable }) {\n      multiDragElements.forEach((multiDragElement) => {\n        multiDragElement.thisAnimationDuration = null;\n      });\n\n      if (\n        activeSortable.options.animation &&\n        !isOwner &&\n        activeSortable.multiDrag.isMultiDrag\n      ) {\n        clonesFromRect = Object.assign({}, dragRect);\n        let dragMatrix = matrix(dragEl, true);\n        clonesFromRect.top -= dragMatrix.f;\n        clonesFromRect.left -= dragMatrix.e;\n      }\n    },\n\n    dragOverAnimationComplete() {\n      if (folding) {\n        folding = false;\n        removeMultiDragElements();\n      }\n    },\n\n    drop({\n      originalEvent: evt,\n      rootEl,\n      parentEl,\n      sortable,\n      dispatchSortableEvent,\n      oldIndex,\n      putSortable,\n    }) {\n      let toSortable = putSortable || this.sortable;\n\n      if (!evt) return;\n\n      let options = this.options,\n        children = parentEl.children;\n\n      // Multi-drag selection\n      if (!dragStarted) {\n        if (options.multiDragKey && !this.multiDragKeyDown) {\n          this._deselectMultiDrag();\n        }\n        toggleClass(\n          dragEl,\n          options.selectedClass,\n          !~multiDragElements.indexOf(dragEl)\n        );\n\n        if (!~multiDragElements.indexOf(dragEl)) {\n          multiDragElements.push(dragEl);\n          dispatchEvent({\n            sortable,\n            rootEl,\n            name: \"select\",\n            targetEl: dragEl,\n            //@ts-ignore\n            originalEvt: evt,\n          });\n\n          // Modifier activated, select from last to dragEl\n          if (\n            evt.shiftKey &&\n            lastMultiDragSelect &&\n            sortable.el.contains(lastMultiDragSelect)\n          ) {\n            //@ts-ignore\n            let lastIndex = index(lastMultiDragSelect),\n              //@ts-ignore\n              currentIndex = index(dragEl);\n\n            if (~lastIndex && ~currentIndex && lastIndex !== currentIndex) {\n              // Must include lastMultiDragSelect (select it), in case modified selection from no selection\n              // (but previous selection existed)\n              let n, i;\n              if (currentIndex > lastIndex) {\n                i = lastIndex;\n                n = currentIndex;\n              } else {\n                i = currentIndex;\n                n = lastIndex + 1;\n              }\n\n              for (; i < n; i++) {\n                if (~multiDragElements.indexOf(children[i])) continue;\n                toggleClass(children[i], options.selectedClass, true);\n                multiDragElements.push(children[i]);\n\n                dispatchEvent({\n                  sortable,\n                  rootEl,\n                  name: \"select\",\n                  targetEl: children[i],\n                  //@ts-ignore\n                  originalEvt: evt,\n                });\n              }\n            }\n          } else {\n            lastMultiDragSelect = dragEl;\n          }\n\n          multiDragSortable = toSortable;\n        } else {\n          multiDragElements.splice(multiDragElements.indexOf(dragEl), 1);\n          lastMultiDragSelect = null;\n          dispatchEvent({\n            sortable,\n            rootEl,\n            name: \"deselect\",\n            targetEl: dragEl,\n            //@ts-ignore\n            originalEvt: evt,\n          });\n        }\n      }\n\n      // Multi-drag drop\n      if (dragStarted && this.isMultiDrag) {\n        // Do not \"unfold\" after around dragEl if reverted\n        if (\n          (parentEl[expando].options.sort || parentEl !== rootEl) &&\n          multiDragElements.length > 1\n        ) {\n          //@ts-ignore\n          let dragRect = getRect(dragEl),\n            multiDragIndex = index(\n              dragEl,\n              \":not(.\" + this.options.selectedClass + \")\"\n            );\n\n          if (!initialFolding && options.animation)\n            dragEl.thisAnimationDuration = null;\n\n          toSortable.captureAnimationState();\n\n          if (!initialFolding) {\n            if (options.animation) {\n              dragEl.fromRect = dragRect;\n              multiDragElements.forEach((multiDragElement) => {\n                multiDragElement.thisAnimationDuration = null;\n                if (multiDragElement !== dragEl) {\n                  //@ts-ignore\n                  let rect = folding ? getRect(multiDragElement) : dragRect;\n                  multiDragElement.fromRect = rect;\n\n                  // Prepare unfold animation\n                  toSortable.addAnimationState({\n                    target: multiDragElement,\n                    rect: rect,\n                  });\n                }\n              });\n            }\n\n            // Multi drag elements are not necessarily removed from the DOM on drop, so to reinsert\n            // properly they must all be removed\n            removeMultiDragElements();\n\n            multiDragElements.forEach((multiDragElement) => {\n              if (children[multiDragIndex]) {\n                parentEl.insertBefore(\n                  multiDragElement,\n                  children[multiDragIndex]\n                );\n              } else {\n                parentEl.appendChild(multiDragElement);\n              }\n              multiDragIndex++;\n            });\n\n            // If initial folding is done, the elements may have changed position because they are now\n            // unfolding around dragEl, even though dragEl may not have his index changed, so update event\n            // must be fired here as Sortable will not.\n            //@ts-ignore\n            if (oldIndex === index(dragEl)) {\n              let update = false;\n              multiDragElements.forEach((multiDragElement) => {\n                //@ts-ignore\n                if (\n                  //@ts-ignore\n                  multiDragElement.sortableIndex !== index(multiDragElement)\n                ) {\n                  update = true;\n                  return;\n                }\n              });\n\n              if (update) {\n                dispatchSortableEvent(\"update\");\n              }\n            }\n          }\n\n          // Must be done after capturing individual rects (scroll bar)\n          multiDragElements.forEach((multiDragElement) => {\n            unsetRect(multiDragElement);\n          });\n\n          toSortable.animateAll();\n        }\n\n        multiDragSortable = toSortable;\n      }\n\n      // Remove clones if necessary\n      if (\n        rootEl === parentEl ||\n        (putSortable && putSortable.lastPutMode !== \"clone\")\n      ) {\n        multiDragClones.forEach((clone) => {\n          clone.parentNode && clone.parentNode.removeChild(clone);\n        });\n      }\n    },\n\n    nullingGlobal() {\n      this.isMultiDrag = dragStarted = false;\n      multiDragClones.length = 0;\n    },\n\n    destroyGlobal() {\n      this._deselectMultiDrag();\n      off(document, \"pointerup\", this._deselectMultiDrag);\n      off(document, \"mouseup\", this._deselectMultiDrag);\n      off(document, \"touchend\", this._deselectMultiDrag);\n\n      off(document, \"keydown\", this._checkKeyDown);\n      off(document, \"keyup\", this._checkKeyUp);\n    },\n\n    _deselectMultiDrag(evt) {\n      if (typeof dragStarted !== \"undefined\" && dragStarted) return;\n\n      // Only deselect if selection is in this sortable\n      if (multiDragSortable !== this.sortable) return;\n\n      // Only deselect if target is not item in this sortable\n      if (\n        evt &&\n        closest(evt.target, this.options.draggable, this.sortable.el, false)\n      )\n        return;\n\n      // Only deselect if left click\n      if (evt && evt.button !== 0) return;\n\n      while (multiDragElements.length) {\n        let el = multiDragElements[0];\n        toggleClass(el, this.options.selectedClass, false);\n        multiDragElements.shift();\n        dispatchEvent({\n          sortable: this.sortable,\n          rootEl: this.sortable.el,\n          name: \"deselect\",\n          //@ts-ignore\n          targetEl: el,\n          //@ts-ignore\n          originalEvt: evt,\n        });\n      }\n    },\n\n    _checkKeyDown(evt) {\n      if (evt.key === this.options.multiDragKey) {\n        this.multiDragKeyDown = true;\n      }\n    },\n\n    _checkKeyUp(evt) {\n      if (evt.key === this.options.multiDragKey) {\n        this.multiDragKeyDown = false;\n      }\n    },\n  };\n\n  return Object.assign(MultiDrag, {\n    // Static methods & properties\n    pluginName: \"multiDrag\",\n    utils: {\n      /**\n       * Selects the provided multi-drag item\n       * @param  {HTMLElement} el    The element to be selected\n       */\n      select(el) {\n        let sortable = el.parentNode[expando];\n        if (\n          !sortable ||\n          !sortable.options.multiDrag ||\n          ~multiDragElements.indexOf(el)\n        )\n          return;\n        if (multiDragSortable && multiDragSortable !== sortable) {\n          multiDragSortable.multiDrag._deselectMultiDrag();\n          multiDragSortable = sortable;\n        }\n        toggleClass(el, sortable.options.selectedClass, true);\n        multiDragElements.push(el);\n      },\n      /**\n       * Deselects the provided multi-drag item\n       * @param  {HTMLElement} el    The element to be deselected\n       */\n      deselect(el) {\n        let sortable = el.parentNode[expando],\n          index = multiDragElements.indexOf(el);\n        if (!sortable || !sortable.options.multiDrag || !~index) return;\n        toggleClass(el, sortable.options.selectedClass, false);\n        multiDragElements.splice(index, 1);\n      },\n    },\n    eventProperties() {\n      const oldIndicies = [],\n        newIndicies = [];\n\n      multiDragElements.forEach((multiDragElement) => {\n        oldIndicies.push({\n          multiDragElement,\n          index: multiDragElement.sortableIndex,\n        });\n\n        // multiDragElements will already be sorted if folding\n        let newIndex;\n        if (folding && multiDragElement !== dragEl) {\n          newIndex = -1;\n        } else if (folding) {\n          newIndex = index(\n            multiDragElement,\n            \":not(.\" + this.options.selectedClass + \")\"\n          );\n        } else {\n          //@ts-ignore\n          newIndex = index(multiDragElement);\n        }\n        newIndicies.push({\n          multiDragElement,\n          index: newIndex,\n        });\n      });\n      return {\n        items: [...multiDragElements],\n        clones: [...multiDragClones],\n        oldIndicies,\n        newIndicies,\n      };\n    },\n    optionListeners: {\n      multiDragKey(key) {\n        key = key.toLowerCase();\n        if (key === \"ctrl\") {\n          key = \"Control\";\n        } else if (key.length > 1) {\n          key = key.charAt(0).toUpperCase() + key.substr(1);\n        }\n        return key;\n      },\n    },\n  });\n}\n\nfunction insertMultiDragElements(clonesInserted, rootEl) {\n  multiDragElements.forEach((multiDragElement, i) => {\n    let target =\n      rootEl.children[\n        multiDragElement.sortableIndex + (clonesInserted ? Number(i) : 0)\n      ];\n    if (target) {\n      rootEl.insertBefore(multiDragElement, target);\n    } else {\n      rootEl.appendChild(multiDragElement);\n    }\n  });\n}\n\n/**\n * Insert multi-drag clones\n * @param  {[Boolean]} elementsInserted  Whether the multi-drag elements are inserted\n * @param  {HTMLElement} rootEl\n */\nfunction insertMultiDragClones(elementsInserted, rootEl) {\n  multiDragClones.forEach((clone, i) => {\n    let target =\n      rootEl.children[clone.sortableIndex + (elementsInserted ? Number(i) : 0)];\n    if (target) {\n      rootEl.insertBefore(clone, target);\n    } else {\n      rootEl.appendChild(clone);\n    }\n  });\n}\n\nfunction removeMultiDragElements() {\n  multiDragElements.forEach((multiDragElement) => {\n    if (multiDragElement === dragEl) return;\n    multiDragElement.parentNode &&\n      multiDragElement.parentNode.removeChild(multiDragElement);\n  });\n}\n\nexport default MultiDragPlugin;\n","import { getChild } from \"../../../utils/src\";\n\nconst drop = function ({\n  originalEvent,\n  putSortable,\n  dragEl,\n  activeSortable,\n  dispatchSortableEvent,\n  hideGhostForTarget,\n  unhideGhostForTarget,\n}) {\n  if (!originalEvent) return;\n  let toSortable = putSortable || activeSortable;\n  hideGhostForTarget();\n  let touch =\n    originalEvent.changedTouches && originalEvent.changedTouches.length\n      ? originalEvent.changedTouches[0]\n      : originalEvent;\n  let target = document.elementFromPoint(touch.clientX, touch.clientY);\n  unhideGhostForTarget();\n  if (toSortable && !toSortable.el.contains(target)) {\n    dispatchSortableEvent(\"spill\");\n    this.onSpill({ dragEl, putSortable });\n  }\n};\n\nfunction Revert() {}\n\nRevert.prototype = {\n  startIndex: null,\n  dragStart({ oldDraggableIndex }) {\n    this.startIndex = oldDraggableIndex;\n  },\n  onSpill({ dragEl, putSortable }) {\n    this.sortable.captureAnimationState();\n    if (putSortable) {\n      putSortable.captureAnimationState();\n    }\n    let nextSibling = getChild(this.sortable.el, this.startIndex, this.options);\n\n    if (nextSibling) {\n      this.sortable.el.insertBefore(dragEl, nextSibling);\n    } else {\n      this.sortable.el.appendChild(dragEl);\n    }\n    this.sortable.animateAll();\n    if (putSortable) {\n      putSortable.animateAll();\n    }\n  },\n  drop,\n};\n\nObject.assign(Revert, {\n  pluginName: \"revertOnSpill\",\n});\n\nfunction Remove() {}\n\nRemove.prototype = {\n  onSpill({ dragEl, putSortable }) {\n    const parentSortable = putSortable || this.sortable;\n    parentSortable.captureAnimationState();\n    dragEl.parentNode && dragEl.parentNode.removeChild(dragEl);\n    parentSortable.animateAll();\n  },\n  drop,\n};\n\nObject.assign(Remove, {\n  pluginName: \"removeOnSpill\",\n});\n\nexport default [Remove, Revert];\n\nexport { Remove as RemoveOnSpill, Revert as RevertOnSpill };\n","import {\n  on,\n  off,\n  css,\n  throttle,\n  cancelThrottle,\n  scrollBy,\n  getParentAutoScrollElement,\n  expando,\n  getRect,\n  getWindowScrollingElement,\n  Edge,\n  IE11OrLess,\n  Safari,\n} from \"../../../utils/src\";\n\nimport Sortable from \"../../../sortable/src/Sortable\";\n\nlet autoScrolls = [],\n  scrollEl,\n  scrollRootEl,\n  scrolling = false,\n  lastAutoScrollX,\n  lastAutoScrollY,\n  touchEvt,\n  pointerElemChangedInterval;\n\nfunction AutoScrollPlugin() {\n  function AutoScroll() {\n    this.defaults = {\n      scroll: true,\n      scrollSensitivity: 30,\n      scrollSpeed: 10,\n      bubbleScroll: true,\n    };\n\n    // Bind all private methods\n    for (let fn in this) {\n      if (fn.charAt(0) === \"_\" && typeof this[fn] === \"function\") {\n        this[fn] = this[fn].bind(this);\n      }\n    }\n  }\n\n  AutoScroll.prototype = {\n    dragStarted({ originalEvent }) {\n      if (this.sortable.nativeDraggable) {\n        on(document, \"dragover\", this._handleAutoScroll);\n      } else {\n        if (this.options.supportPointer) {\n          on(document, \"pointermove\", this._handleFallbackAutoScroll);\n        } else if (originalEvent.touches) {\n          on(document, \"touchmove\", this._handleFallbackAutoScroll);\n        } else {\n          on(document, \"mousemove\", this._handleFallbackAutoScroll);\n        }\n      }\n    },\n\n    dragOverCompleted({ originalEvent }) {\n      // For when bubbling is canceled and using fallback (fallback 'touchmove' always reached)\n      if (!this.options.dragOverBubble && !originalEvent.rootEl) {\n        this._handleAutoScroll(originalEvent);\n      }\n    },\n\n    drop() {\n      if (this.sortable.nativeDraggable) {\n        off(document, \"dragover\", this._handleAutoScroll);\n      } else {\n        off(document, \"pointermove\", this._handleFallbackAutoScroll);\n        off(document, \"touchmove\", this._handleFallbackAutoScroll);\n        off(document, \"mousemove\", this._handleFallbackAutoScroll);\n      }\n\n      clearPointerElemChangedInterval();\n      clearAutoScrolls();\n      cancelThrottle();\n    },\n\n    nulling() {\n      touchEvt = scrollRootEl = scrollEl = scrolling = pointerElemChangedInterval = lastAutoScrollX = lastAutoScrollY = null;\n\n      autoScrolls.length = 0;\n    },\n\n    _handleFallbackAutoScroll(evt) {\n      this._handleAutoScroll(evt, true);\n    },\n\n    _handleAutoScroll(evt, fallback) {\n      const x = (evt.touches ? evt.touches[0] : evt).clientX,\n        y = (evt.touches ? evt.touches[0] : evt).clientY,\n        elem = document.elementFromPoint(x, y);\n\n      touchEvt = evt;\n\n      // IE does not seem to have native autoscroll,\n      // Edge's autoscroll seems too conditional,\n      // MACOS Safari does not have autoscroll,\n      // Firefox and Chrome are good\n      if (fallback || Edge || IE11OrLess || Safari) {\n        //@ts-ignore\n        autoScroll(evt, this.options, elem, fallback);\n\n        // Listener for pointer element change\n        let ogElemScroller = getParentAutoScrollElement(elem, true);\n        if (\n          scrolling &&\n          (!pointerElemChangedInterval ||\n            x !== lastAutoScrollX ||\n            y !== lastAutoScrollY)\n        ) {\n          pointerElemChangedInterval && clearPointerElemChangedInterval();\n          // Detect for pointer elem change, emulating native DnD behaviour\n          pointerElemChangedInterval = setInterval(() => {\n            let newElem = getParentAutoScrollElement(\n              document.elementFromPoint(x, y),\n              true\n            );\n            if (newElem !== ogElemScroller) {\n              ogElemScroller = newElem;\n              clearAutoScrolls();\n            }\n            //@ts-ignore\n            autoScroll(evt, this.options, newElem, fallback);\n          }, 10);\n          lastAutoScrollX = x;\n          lastAutoScrollY = y;\n        }\n      } else {\n        // if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll\n        if (\n          !this.options.bubbleScroll ||\n          getParentAutoScrollElement(elem, true) === getWindowScrollingElement()\n        ) {\n          clearAutoScrolls();\n          return;\n        }\n        autoScroll(\n          //@ts-ignore\n          evt,\n          this.options,\n          getParentAutoScrollElement(elem, false),\n          false\n        );\n      }\n    },\n  };\n\n  return Object.assign(AutoScroll, {\n    pluginName: \"scroll\",\n    initializeByDefault: true,\n  });\n}\n\nfunction clearAutoScrolls() {\n  autoScrolls.forEach(function (autoScroll) {\n    clearInterval(autoScroll.pid);\n  });\n  autoScrolls = [];\n}\n\nfunction clearPointerElemChangedInterval() {\n  clearInterval(pointerElemChangedInterval);\n}\n\nconst autoScroll = throttle(function (evt, options, rootEl, isFallback) {\n  // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521\n  if (!options.scroll) return;\n  const x = (evt.touches ? evt.touches[0] : evt).clientX,\n    y = (evt.touches ? evt.touches[0] : evt).clientY,\n    sens = options.scrollSensitivity,\n    speed = options.scrollSpeed,\n    winScroller = getWindowScrollingElement();\n\n  let scrollThisInstance = false,\n    scrollCustomFn;\n\n  // New scroll root, set scrollEl\n  if (scrollRootEl !== rootEl) {\n    scrollRootEl = rootEl;\n\n    clearAutoScrolls();\n\n    scrollEl = options.scroll;\n    scrollCustomFn = options.scrollFn;\n\n    if (scrollEl === true) {\n      scrollEl = getParentAutoScrollElement(rootEl, true);\n    }\n  }\n\n  let layersOut = 0;\n  let currentParent = scrollEl;\n  do {\n    let el = currentParent,\n      //@ts-ignore\n      rect = getRect(el),\n      top = rect.top,\n      bottom = rect.bottom,\n      left = rect.left,\n      right = rect.right,\n      width = rect.width,\n      height = rect.height,\n      canScrollX,\n      canScrollY,\n      scrollWidth = el.scrollWidth,\n      scrollHeight = el.scrollHeight,\n      //@ts-ignore\n      elCSS = css(el),\n      scrollPosX = el.scrollLeft,\n      scrollPosY = el.scrollTop;\n\n    if (el === winScroller) {\n      canScrollX =\n        width < scrollWidth &&\n        (elCSS.overflowX === \"auto\" ||\n          elCSS.overflowX === \"scroll\" ||\n          elCSS.overflowX === \"visible\");\n      canScrollY =\n        height < scrollHeight &&\n        (elCSS.overflowY === \"auto\" ||\n          elCSS.overflowY === \"scroll\" ||\n          elCSS.overflowY === \"visible\");\n    } else {\n      canScrollX =\n        width < scrollWidth &&\n        (elCSS.overflowX === \"auto\" || elCSS.overflowX === \"scroll\");\n      canScrollY =\n        height < scrollHeight &&\n        (elCSS.overflowY === \"auto\" || elCSS.overflowY === \"scroll\");\n    }\n\n    let vx =\n      canScrollX &&\n      //@ts-ignore\n      (Math.abs(right - x) <= sens && scrollPosX + width < scrollWidth) -\n        //@ts-ignore\n        (Math.abs(left - x) <= sens && !!scrollPosX);\n    let vy =\n      canScrollY &&\n      //@ts-ignore\n      (Math.abs(bottom - y) <= sens && scrollPosY + height < scrollHeight) -\n        //@ts-ignore\n        (Math.abs(top - y) <= sens && !!scrollPosY);\n\n    if (!autoScrolls[layersOut]) {\n      for (let i = 0; i <= layersOut; i++) {\n        if (!autoScrolls[i]) {\n          autoScrolls[i] = {};\n        }\n      }\n    }\n\n    if (\n      autoScrolls[layersOut].vx != vx ||\n      autoScrolls[layersOut].vy != vy ||\n      autoScrolls[layersOut].el !== el\n    ) {\n      autoScrolls[layersOut].el = el;\n      autoScrolls[layersOut].vx = vx;\n      autoScrolls[layersOut].vy = vy;\n\n      clearInterval(autoScrolls[layersOut].pid);\n\n      if (vx != 0 || vy != 0) {\n        scrollThisInstance = true;\n        /* jshint loopfunc:true */\n        autoScrolls[layersOut].pid = setInterval(\n          function () {\n            // emulate drag over during autoscroll (fallback), emulating native DnD behaviour\n            if (isFallback && this.layer === 0) {\n              //@ts-ignore\n              Sortable.active._onTouchMove(touchEvt); // To move ghost if it is positioned absolutely\n            }\n            let scrollOffsetY = autoScrolls[this.layer].vy\n              ? autoScrolls[this.layer].vy * speed\n              : 0;\n            let scrollOffsetX = autoScrolls[this.layer].vx\n              ? autoScrolls[this.layer].vx * speed\n              : 0;\n\n            if (typeof scrollCustomFn === \"function\") {\n              if (\n                scrollCustomFn.call(\n                  //@ts-ignore\n                  Sortable.dragged.parentNode[expando],\n                  scrollOffsetX,\n                  scrollOffsetY,\n                  evt,\n                  touchEvt,\n                  autoScrolls[this.layer].el\n                ) !== \"continue\"\n              ) {\n                return;\n              }\n            }\n\n            scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);\n          }.bind({ layer: layersOut }),\n          24\n        );\n      }\n    }\n    layersOut++;\n  } while (options.bubbleScroll && currentParent !== winScroller && (currentParent = getParentAutoScrollElement(currentParent, false)));\n  scrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not\n}, 30);\n\nexport default AutoScrollPlugin;\n","import Sortable from \"../../sortable/src/Sortable\";\nimport Swap from \"../../plugins/swap/src\";\nimport MultiDrag from \"../../plugins/multi-drag/src\";\nimport { RemoveOnSpill, RevertOnSpill } from \"../../plugins/on-spill/src\";\nimport AutoScroll from \"../../plugins/auto-scroll/src\";\n\n//@ts-ignore\nSortable.mount(new AutoScroll());\nSortable.mount(RemoveOnSpill, RevertOnSpill);\n//@ts-ignore\nSortable.mount(new Swap());\n//@ts-ignore\nSortable.mount(new MultiDrag());\n\nexport default Sortable;\nexport { Sortable };\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  active: PropTypes.bool,\n  disabled: PropTypes.bool,\n  color: PropTypes.string,\n  action: PropTypes.bool,\n  className: PropTypes.any,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'li'\n};\n\nvar handleDisabledOnClick = function handleDisabledOnClick(e) {\n  e.preventDefault();\n};\n\nvar ListGroupItem = function ListGroupItem(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      active = props.active,\n      disabled = props.disabled,\n      action = props.action,\n      color = props.color,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\", \"active\", \"disabled\", \"action\", \"color\"]);\n\n  var classes = mapToCssModules(classNames(className, active ? 'active' : false, disabled ? 'disabled' : false, action ? 'list-group-item-action' : false, color ? \"list-group-item-\" + color : false, 'list-group-item'), cssModule); // Prevent click event when disabled.\n\n  if (disabled) {\n    attributes.onClick = handleDisabledOnClick;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nListGroupItem.propTypes = propTypes;\nListGroupItem.defaultProps = defaultProps;\nexport default ListGroupItem;",null,"import { PropsWithChildren } from \"react\";\nimport Sortable, { Options } from \"sortablejs\";\nimport { MultiDragEvent } from \"./react-sortable\";\nimport { AllMethodNames, ItemInterface, ReactSortableProps } from \"./types\";\n\n/**\n * Removes the `node` from the DOM\n * @param node\n */\nexport function removeNode(node: HTMLElement): void {\n  if (node.parentElement !== null) node.parentElement.removeChild(node);\n}\n\n/**\n * Inserts the `newChild` node at the given index in a parent\n * @param parent The parent HTML Element.\n * @param newChild A HTML eement to add as a child of the parent.\n * @param index index of the parent to place the new child in.\n */\nexport function insertNodeAt(\n  parent: HTMLElement,\n  newChild: HTMLElement,\n  index: number\n): void {\n  const refChild = parent.children[index] || null;\n  parent.insertBefore(newChild, refChild);\n}\n\n// @todo - create a dom handler function for arrays or not at all\n\n/** removes stuff from the dom in a nice order */\n// @todo - do I need parenElement?\nexport function handleDOMChanges<T extends ItemInterface>(\n  customs: Normalized<T>[]\n): void {\n  removeNodes(customs);\n  insertNodes(customs);\n}\n\nexport function removeNodes<T extends ItemInterface>(\n  customs: Normalized<T>[]\n): void {\n  customs.forEach((curr) => removeNode(curr.element));\n}\n\nexport function insertNodes<T extends ItemInterface>(\n  customs: Normalized<T>[]\n): void {\n  customs.forEach((curr) => {\n    insertNodeAt(curr.parentElement, curr.element, curr.oldIndex);\n  });\n}\n\nexport function createCustoms<T extends ItemInterface>(\n  evt: MultiDragEvent,\n  list: T[]\n): Normalized<T>[] {\n  const mode = getMode(evt);\n  const parentElement = { parentElement: evt.from };\n  let custom = [];\n  switch (mode) {\n    case \"normal\":\n      /* eslint-disable */\n      const item = {\n        element: evt.item,\n        newIndex: evt.newIndex!,\n        oldIndex: evt.oldIndex!,\n        parentElement: evt.from,\n      };\n      custom = [item];\n      break;\n    case \"swap\":\n      const drag: Input = {\n        element: evt.item,\n        oldIndex: evt.oldIndex!,\n        newIndex: evt.newIndex!,\n        ...parentElement,\n      };\n      const swap: Input = {\n        element: evt.swapItem!,\n        oldIndex: evt.newIndex!,\n        newIndex: evt.oldIndex!,\n        ...parentElement,\n      };\n      custom = [drag, swap];\n      break;\n    case \"multidrag\":\n      custom = evt.oldIndicies.map<Input>((curr, index) => ({\n        element: curr.multiDragElement,\n        oldIndex: curr.index,\n        newIndex: evt.newIndicies[index].index,\n        ...parentElement,\n      }));\n      break;\n  }\n  /* eslint-enable */\n\n  const customs = createNormalized(custom, list);\n  return customs;\n}\n\n/** moves items form old index to new index without breaking anything ideally. */\nexport function handleStateChanges<T extends ItemInterface>(\n  normalized: Normalized<T>[],\n  list: T[]\n): T[] {\n  const a = handleStateRemove(normalized, list);\n  const b = handleStateAdd(normalized, a);\n  return b;\n}\n\nexport function handleStateRemove<T extends ItemInterface>(\n  normalized: Normalized<T>[],\n  list: T[]\n): T[] {\n  const newList = [...list];\n  normalized\n    .concat()\n    .reverse()\n    .forEach((curr) => newList.splice(curr.oldIndex, 1));\n  return newList;\n}\n\nexport function handleStateAdd<T extends ItemInterface>(\n  normalized: Normalized<T>[],\n  list: T[],\n  evt?: Sortable.SortableEvent,\n  clone?: ((currentItem: T, evt: Sortable.SortableEvent) => T) | undefined\n): T[] {\n  const newList = [...list];\n  normalized.forEach((curr) => {\n    const newItem = clone && evt && clone(curr.item, evt);\n    newList.splice(curr.newIndex, 0, newItem || curr.item);\n  });\n  return newList;\n}\n\nexport function getMode(evt: MultiDragEvent): \"multidrag\" | \"swap\" | \"normal\" {\n  if (evt.oldIndicies && evt.oldIndicies.length > 0) return \"multidrag\";\n  if (evt.swapItem) return \"swap\";\n  return \"normal\";\n}\n\nexport function createNormalized<T extends ItemInterface>(\n  inputs: Input[],\n  list: T[]\n): Normalized<T>[] {\n  const normalized = inputs\n    .map<Normalized<T>>((curr) => ({ ...curr, item: list[curr.oldIndex] }))\n    .sort((a, b) => a.oldIndex - b.oldIndex);\n  return normalized;\n}\n\nexport interface Input {\n  parentElement: HTMLElement;\n  element: HTMLElement;\n  oldIndex: number;\n  newIndex: number;\n}\n\nexport interface Normalized<T> extends Input {\n  item: T;\n}\n\n/**\n * Removes the following group of properties from `props`,\n * leaving only `Sortable.Options` without any `on` methods.\n * @param props `ReactSortable.Props`\n */\nexport function destructurePropsForOptions<T>(\n  props: PropsWithChildren<ReactSortableProps<T>>\n): Exclude<Options, AllMethodNames> {\n  /* eslint-disable */\n  const {\n    // react sortable props\n    list,\n    setList,\n    children,\n    tag,\n    style,\n    className,\n    clone,\n    // sortable options that have methods we want to overwrite\n    onAdd,\n    onChange,\n    onChoose,\n    onClone,\n    onEnd,\n    onFilter,\n    onRemove,\n    onSort,\n    onStart,\n    onUnchoose,\n    onUpdate,\n    onMove,\n    onSpill,\n    onSelect,\n    onDeselect,\n    ...options\n  } = props;\n  /* eslint-enable */\n  return options;\n}\n\n/**\n * Construct a type with the properties of T except for those in type K.\n * Including this allows for backwards compatibility with earlier versions of TS.\n */\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n","import classNames from \"classnames\";\nimport {\n  Children,\n  cloneElement,\n  Component,\n  createElement,\n  createRef,\n  ReactElement,\n  RefObject,\n} from \"react\";\nimport Sortable, { MoveEvent, Options, SortableEvent } from \"sortablejs\";\nimport invariant from \"tiny-invariant\";\nimport {\n  AllMethodsExceptMove,\n  HandledMethodNames,\n  ItemInterface,\n  ReactSortableProps,\n  Store,\n  UnHandledMethodNames,\n} from \"./types\";\nimport {\n  createCustoms,\n  destructurePropsForOptions,\n  getMode,\n  handleStateAdd,\n  handleStateChanges,\n  handleStateRemove,\n  insertNodes,\n  removeNode,\n  removeNodes,\n} from \"./util\";\n\n/** Holds a global reference for which react element is being dragged */\n// @todo - use context to manage this. How does one use 2 different providers?\nconst store: Store = { dragging: null };\n\nexport class ReactSortable<T extends ItemInterface> extends Component<\n  ReactSortableProps<T>\n> {\n  /* eslint-disable-next-line */\n  static defaultProps: Partial<ReactSortableProps<any>> = {\n    clone: (item) => item,\n  };\n\n  private ref: RefObject<HTMLElement>;\n  constructor(props: ReactSortableProps<T>) {\n    super(props);\n    // @todo forward ref this component\n    this.ref = createRef<HTMLElement>();\n\n    // make all state false because we can't change sortable unless a mouse gesture is made.\n    const newList = props.list.map((item) => ({\n      ...item,\n      chosen: false,\n      selected: false,\n    }));\n\n    props.setList(newList, this.sortable, store);\n    invariant(\n      //@ts-expect-error: Doesn't exist. Will deprecate soon.\n      !props.plugins,\n      `\nPlugins prop is no longer supported.\nInstead, mount it with \"Sortable.mount(new MultiDrag())\"\nPlease read the updated README.md at https://github.com/SortableJS/react-sortablejs.\n      `\n    );\n  }\n  componentDidMount(): void {\n    if (this.ref.current === null) return;\n    const newOptions = this.makeOptions();\n    Sortable.create(this.ref.current, newOptions);\n  }\n\n  render(): JSX.Element {\n    const { tag, style, className, id } = this.props;\n    const classicProps = { style, className, id };\n\n    // if no tag, default to a `div` element.\n    const newTag = !tag || tag === null ? \"div\" : tag;\n    return createElement(\n      newTag,\n      {\n        // @todo - find a way (perhaps with the callback) to allow AntD components to work\n        ref: this.ref,\n        ...classicProps,\n      },\n      this.getChildren()\n    );\n  }\n\n  private getChildren() {\n    const {\n      children,\n      dataIdAttr,\n      selectedClass = \"sortable-selected\",\n      chosenClass = \"sortable-chosen\",\n      /* eslint-disable */\n      dragClass = \"sortable-drag\",\n      fallbackClass = \"sortable-falback\",\n      ghostClass = \"sortable-ghost\",\n      swapClass = \"sortable-swap-highlight\",\n      /* eslint-enable */\n      filter = \"sortable-filter\",\n      list,\n    } = this.props;\n\n    // if no children, don't do anything.\n    if (!children || children == null) return null;\n    const dataid = dataIdAttr || \"data-id\";\n    /* eslint-disable-next-line */\n    return Children.map(children as ReactElement<any>[], (child, index) => {\n      const item = list[index];\n      const { className: prevClassName } = child.props;\n\n      // @todo - handle the function if avalable. I don't think anyone will be doing this soon.\n      const filtered = typeof filter === \"string\" && {\n        [filter.replace(\".\", \"\")]: !!item.filtered,\n      };\n\n      const className = classNames(prevClassName, {\n        [selectedClass]: item.selected,\n        [chosenClass]: item.chosen,\n        ...filtered,\n        // [dragClass]: true,\n        // [fallbackClass]: true,\n        // [ghostClass]: true,\n        // [swapClass]: true\n      });\n\n      return cloneElement(child, {\n        [dataid]: child.key,\n        className,\n      });\n    });\n  }\n\n  /** Appends the `sortable` property to this component */\n  private get sortable(): Sortable | null {\n    const el = this.ref.current;\n    if (el === null) return null;\n    const key = Object.keys(el).find((k) => k.includes(\"Sortable\"));\n    if (!key) return null;\n    //@ts-expect-error: fix me.\n    return el[key] as Sortable;\n  }\n\n  /** Converts all the props from `ReactSortable` into the `options` object that `Sortable.create(el, [options])` can use. */\n  makeOptions(): Options {\n    const DOMHandlers: HandledMethodNames[] = [\n      \"onAdd\",\n      \"onChoose\",\n      \"onDeselect\",\n      \"onEnd\",\n      \"onRemove\",\n      \"onSelect\",\n      \"onSpill\",\n      \"onStart\",\n      \"onUnchoose\",\n      \"onUpdate\",\n    ];\n    const NonDOMHandlers: UnHandledMethodNames[] = [\n      \"onChange\",\n      \"onClone\",\n      \"onFilter\",\n      \"onSort\",\n    ];\n    const newOptions: Options = destructurePropsForOptions(this.props);\n    DOMHandlers.forEach(\n      (name) => (newOptions[name] = this.prepareOnHandlerPropAndDOM(name))\n    );\n    NonDOMHandlers.forEach(\n      (name) => (newOptions[name] = this.prepareOnHandlerProp(name))\n    );\n\n    /** onMove has 2 arguments and needs to be handled seperately. */\n    const onMove = (evt: MoveEvent, originalEvt: Event) => {\n      const { onMove } = this.props;\n      const defaultValue = evt.willInsertAfter || -1;\n      if (!onMove) return defaultValue;\n      const result = onMove(evt, originalEvt, this.sortable, store);\n      if (typeof result === \"undefined\") return false;\n      return result;\n    };\n\n    return {\n      ...newOptions,\n      onMove,\n    };\n  }\n\n  /** Prepares a method that will be used in the sortable options to call an `on[Handler]` prop & an `on[Handler]` ReactSortable method.  */\n  prepareOnHandlerPropAndDOM(\n    evtName: HandledMethodNames\n  ): (evt: SortableEvent) => void {\n    return (evt) => {\n      // call the component prop\n      this.callOnHandlerProp(evt, evtName);\n      // calls state change\n      //@ts-expect-error: until @types multidrag item is in\n      this[evtName](evt);\n    };\n  }\n\n  /** Prepares a method that will be used in the sortable options to call an `on[Handler]` prop */\n  prepareOnHandlerProp(\n    evtName: Exclude<AllMethodsExceptMove, HandledMethodNames>\n  ): (evt: SortableEvent) => void {\n    return (evt) => {\n      // call the component prop\n      this.callOnHandlerProp(evt, evtName);\n    };\n  }\n\n  /** Calls the `props.on[Handler]` function */\n  callOnHandlerProp(evt: SortableEvent, evtName: AllMethodsExceptMove): void {\n    const propEvent = this.props[evtName];\n    if (propEvent) propEvent(evt, this.sortable, store);\n  }\n\n  // SORTABLE DOM HANDLING\n\n  onAdd(evt: MultiDragEvent): void {\n    const { list, setList, clone } = this.props;\n    /* eslint-disable-next-line */\n    const otherList = [...store.dragging!.props.list];\n    const customs = createCustoms(evt, otherList);\n    removeNodes(customs);\n    const newList = handleStateAdd(customs, list, evt, clone).map((item) => ({\n      ...item,\n      selected: false,\n    }));\n    setList(newList, this.sortable, store);\n  }\n\n  onRemove(evt: MultiDragEvent): void {\n    const { list, setList } = this.props;\n    const mode = getMode(evt);\n    const customs = createCustoms(evt, list);\n    insertNodes(customs);\n\n    let newList = [...list];\n    // remove state if not in clone mode. otherwise, keep.\n    if (evt.pullMode !== \"clone\") newList = handleStateRemove(customs, newList);\n    // if clone, it doesn't really remove. instead it clones in place.\n    // @todo -\n    else {\n      // switch used to get the clone\n      let customClones = customs;\n      switch (mode) {\n        case \"multidrag\":\n          customClones = customs.map((item, index) => ({\n            ...item,\n            element: evt.clones[index],\n          }));\n          break;\n        case \"normal\":\n          customClones = customs.map((item) => ({\n            ...item,\n            element: evt.clone,\n          }));\n          break;\n        case \"swap\":\n        default: {\n          invariant(\n            true,\n            `mode \"${mode}\" cannot clone. Please remove \"props.clone\" from <ReactSortable/> when using the \"${mode}\" plugin`\n          );\n        }\n      }\n      removeNodes(customClones);\n\n      // replace selected items with cloned items\n      customs.forEach((curr) => {\n        const index = curr.oldIndex;\n        /* eslint-disable-next-line */\n        const newItem = this.props.clone!(curr.item, evt);\n        newList.splice(index, 1, newItem);\n      });\n    }\n\n    // remove item.selected from list\n    newList = newList.map((item) => ({ ...item, selected: false }));\n    setList(newList, this.sortable, store);\n  }\n\n  onUpdate(evt: MultiDragEvent): void {\n    const { list, setList } = this.props;\n    const customs = createCustoms(evt, list);\n    removeNodes(customs);\n    insertNodes(customs);\n    const newList = handleStateChanges(customs, list);\n    return setList(newList, this.sortable, store);\n  }\n\n  onStart(): void {\n    store.dragging = this;\n  }\n\n  onEnd(): void {\n    store.dragging = null;\n  }\n\n  onChoose(evt: SortableEvent): void {\n    const { list, setList } = this.props;\n    const newList = list.map((item, index) => {\n      if (index === evt.oldIndex) {\n        return {\n          ...item,\n          chosen: true,\n        };\n      }\n      return item;\n    });\n    setList(newList, this.sortable, store);\n  }\n\n  onUnchoose(evt: SortableEvent): void {\n    const { list, setList } = this.props;\n    const newList = list.map((item, index) => {\n      if (index === evt.oldIndex) {\n        return {\n          ...item,\n          chosen: false,\n        };\n      }\n      return item;\n    });\n    setList(newList, this.sortable, store);\n  }\n\n  onSpill(evt: SortableEvent): void {\n    const { removeOnSpill, revertOnSpill } = this.props;\n    if (removeOnSpill && !revertOnSpill) removeNode(evt.item);\n  }\n\n  onSelect(evt: MultiDragEvent): void {\n    const { list, setList } = this.props;\n    const newList = list.map((item) => ({ ...item, selected: false }));\n    evt.newIndicies.forEach((curr) => {\n      const index = curr.index;\n      if (index === -1) {\n        console.log(\n          `\"${evt.type}\" had indice of \"${curr.index}\", which is probably -1 and doesn't usually happen here.`\n        );\n        console.log(evt);\n        return;\n      }\n      newList[index].selected = true;\n    });\n    setList(newList, this.sortable, store);\n  }\n\n  onDeselect(evt: MultiDragEvent): void {\n    const { list, setList } = this.props;\n    const newList = list.map((item) => ({ ...item, selected: false }));\n    evt.newIndicies.forEach((curr) => {\n      const index = curr.index;\n      if (index === -1) return;\n      newList[index].selected = true;\n    });\n    setList(newList, this.sortable, store);\n  }\n}\n\n// everything below this point can be removed\n// once @types has been merged. PR submited\ninterface MultiIndices {\n  multiDragElement: HTMLElement;\n  index: number;\n}\n\nexport interface MultiDragEvent extends SortableEvent {\n  // @todo - add this to @types\n  clones: HTMLElement[];\n  oldIndicies: MultiIndices[];\n  newIndicies: MultiIndices[];\n  swapItem: HTMLElement | null;\n}\n"],"sourceRoot":""}